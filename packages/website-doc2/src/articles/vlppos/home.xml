<article>
    <topic>
        <title>Introduction to VlppOS</title>
        <p>
            Vlpp provides an thin OS abstraction layer. Here is what you can get from this library:
        </p>
        <topic>
            <title>Stream</title>
            <p>In namespace <b>::vl::stream</b>,</p>
            <p>
                <ul>
                    <li><b>FileStream</b> for reading and writing files.</li>
                    <li><b>MemoryStream</b>, <b>MemoryWrapperStream</b> for reading and writing memories.</li>
                    <li><b>CacheStream</b> for speeding up IO performance.</li>
                    <li><b>StringReader</b>, <b>StreamReader</b>, <b>StreamWriter</b> for reading and writing text against a stream.</li>
                    <li><b>CompressTream</b> and <b>DecompressStream</b> functions for handling compressed data using LZW compression algorithm.</li>
                    <li>And more ...</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>Text encoding operations</title>
            <p>In namespace <b>::vl::stream</b>,</p>
            <p>
                <ul>
                    <li><b>EncoderStream</b> and <b>DecoderStream</b> for translating content in streams.</li>
                    <li><b>UtfGeneralEncoder&lt;TNative, TExpect&gt;</b>, <b>UtfGeneralDecoder&lt;TNative, TExpect&gt;</b> and others for converting between an underlying stream in <b>TNative</b> and a stream in <b>TExpect</b>.</li>
                    <li><b>BomEncoder</b>, <b>BomDecoder</b> and others for converting between an underlying stream beginning with BOM and a stream in <b>wchar_t</b>.</li>
                    <li><b>Utf8Base64Encoder</b>, <b>Utf8Base64Decoder</b> and others for converting between an underlying stream in UTF-8 base64 and a stream in UTF-8.</li>
                    <li><b>TestEncoding</b> function for guessting text encoding in a piece of memory.</li>
                    <li><b>GenerateToStream</b> function for speeding up large string building.</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>File system</title>
            <p>In namespace <b>::vl::filesystem</b>,</p>
            <p>
                <ul>
                    <li><b>FilePath</b> for file path operations.</li>
                    <li><b>File</b> and <b>Folder</b> for accessing file system.</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>Locale operations</title>
            <p>In namespace <b>::vl</b>,</p>
            <p>
                <ul>
                    <li><b>Locale</b> for locale awared string and format operations.</li>
                    <li><b>INVLOC</b> macro as a shortcut to access the invariant locale.</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>HTTP client</title>
            <p>In namespace <b>::vl</b>,</p>
            <p>
                <ul>
                    <li><b>HttpQuery</b> function for sending a request and waiting for a response synchronized.</li>
                    <li><b>UrlEncodeQuery</b> function for building query arguments.</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>Threadings and synchronizations</title>
            <p>In namespace <b>::vl</b>,</p>
            <p>
                <ul>
                    <li><b>Thread</b>, <b>ThreadPoolLite</b> and <b>RepeatingTaskExecutor&lt;T&gt;</b> for executing tasks in background.</li>
                    <li><b>ThreadVariable&lt;T&gt;</b> for thread local variables.</li>
                    <li><b>Mutex</b>, <b>Semaphore</b>, <b>EventObject</b>, <b>CriticalSection</b>, <b>ReaderWriterLock</b>, <b>ConditionVariable</b>, <b>SpinLock</b> for synchronization.</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>Unit test framework</title>
            <topic>
                <title>Mocking Locale</title>
                <p>
                    <b>vl::InjectLocaleImpl</b> could be used to control the implementation of <b>vl::Locale</b>.
                    This function stack all injections, each injection could access the previous implementation by implementing <b>vl::feature_injection::IFeatureImpl</b>
                </p>
                <p>
                    <b>vl::EjectLocaleImpl</b> could be used to revert <b>vl::InjectLocaleImpl</b>.
                    Passing <b>nullptr</b> to cancel all <b>vl::InjectLocaleImpl</b> calls.
                </p>
            </topic>
            <topic>
                <title>Mocking File, Folder and FileStream</title>
                <p>
                    <b>vl::filesystem::InjectFileSystemImpl</b> could be used to control the implementation of <b>vl::filesystem::File</b>, <b>vl::filesystem::Folder</b>, and <b>vl::stream::FileStream</b>.
                    This function stack all injections, each injection could access the previous implementation by implementing <b>vl::feature_injection::IFeatureImpl</b>
                </p>
                <p>
                    <b>IFileSystemImpl::GetFileStreamImpl</b> controls how <b>FileStream</b> access a file from a given file path.
                    If virtual files are added to the file system, this function should take care of them.
                    This function can redirect the call to the previous implementation for files that are not added by the current implementation.
                </p>
                <p>
                    <b>vl::filesystem::EjectFileSystemImpl</b> could be used to revert <b>vl::filesystem::InjectFileSystemImpl</b>.
                    Passing <b>nullptr</b> to cancel all <b>vl::filesystem::InjectFileSystemImpl</b> calls.
                </p>
            </topic>
        </topic>
    </topic>
</article>