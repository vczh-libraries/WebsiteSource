<article>
    <topic>
        <title>Introduction to Vlpp</title>
        <p>
            Vlpp provides basic constructions for writing C++ programs. Here is what you can get from this library:
        </p>
        <topic>
            <title>Data types</title>
            <p>In namespace <b>::vl</b>,</p>
            <p>
                <ul>
                    <li><b>Object</b> and <b>Interface</b>, which are base classes for reference types and interfaces. Almost everything inherit from one or both of them.</li>
                    <li><b>Nullable&lt;T&gt;</b>, <b>Ptr&lt;T&gt;</b>, <b>Tuple&lt;Ts...&gt;</b>, <b>Variant&lt;Ts...&gt;</b>: data containers.</li>
                    <li><b>AString</b>, <b>WString</b>, <b>U8String</b>, <b>U16String</b>, <b>U32String</b>, <b>DateTime</b>: basic primitive types.</li>
                    <li><b>Error</b>, <b>Exception</b>: basic exception types.</li>
                    <li><b>Func&lt;T&gt;</b>, <b>Event&lt;T&gt;</b>: strongly-typed functor that can contain function pointers, method pointers or lambda expressions.</li>
                    <li><b>LoremIpsum</b> and related functions.</li>
                    <li>And more ...</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>String conversion operations</title>
            <p>In namespace <b>::vl</b>,</p>
            <p>
                <ul>
                    <li>Functions convert <b>WString</b> to numbers: <b>wto([ui](64)?|f)</b> and <b>wto([ui](64)?|f)_test</b>.</li>
                    <li>Functions convert <b>AString</b> to numbers: <b>ato([ui](64)?|f)</b> and <b>ato([ui](64)?|f)_test</b>.</li>
                    <li>Functions convert numbers to <b>WString</b>: <b>([ui](64)?|f)tow</b>.</li>
                    <li>Functions convert numbers to <b>AString</b>: <b>([ui](64)?|f)toa</b>.</li>
                    <li>Lower and upper case: <b>[aw](lower|upper)</b>.</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>String encoding operations</title>
            <p>In namespace <b>::vl</b>,</p>
            <p>
                <b>char16be_t</b> for big endian Utf-16 character.
            </p>
            <p>
                <ul>
                    <li><b>UtfConversion&lt;T&gt;</b> to convert strings from and to Utf-32, using <b>From32</b> and <b>To32</b> static member functions.</li>
                    <li><b>(a|w|u(8|16|32))to(a|w|u(8|16|32))</b>: convert between strings.</li>
                    <li><b>ConvertUtfString&lt;TFrom, TTo&gt;</b>: convert between UTF strings. <b>TFrom</b> and <b>TTo</b> must be one of <b>WString</b>, <b>U8String</b>, <b>U16String</b>, <b>U32String</b>.</li>
                </ul>
            </p>
            <p>
                A string reader concept implemented by combination of classes with the following members:
                <ul>
                    <li><b>Read</b>: Read a code point, could be <b>wchar_t</b>, <b>char8_t</b>, <b>char16_t</b>, <b>char16be_t</b> or <b>char32_t</b>. It returns 0 when there is no more code point to read.</li>
                    <li><b>ReadingIndex</b>: The index of the last successful called to <b>Read</b>, beginning from 0.</li>
                    <li><b>SourceCluster</b>: The position of the sub array in source code points of the last successful called to <b>Read</b>.</li>
                </ul>
            </p>
            <p>
                A string consumer concept implemented by combination of classes with the following members:
                <ul>
                    <li>protected <b>Consume</b>: Read a code point, could be <b>wchar_t</b>, <b>char8_t</b>, <b>char16_t</b>, <b>char16be_t</b> or <b>char32_t</b>. It returns 0 when there is no more code point to read.</li>
                    <li>
                        To convert a reader to a consumer, use <b>UtfReaderConsumer&lt;TReader, TConsumerRedirection&lt;T&gt;&gt;</b>.
                        <b>TConsumerRedirection</b> could offer a replacement implementation of <b>SourceCluster</b>,
                        but if it is not needed, just pass <b>UtfEmptyConsumerRedirection</b> to it.
                    </li>
                    <li>
                        Use <b>UtfStringConsumer&lt;T&gt;</b> to create a consumer,
                        offering code points stored in a zero-terminated pointer.
                        <b>T</b> could be could be <b>wchar_t</b>, <b>char8_t</b>, <b>char16_t</b>, <b>char16be_t</b> or <b>char32_t</b>.
                    </li>
                    <li>
                        Use <b>UtfStringRangeConsumer&lt;T&gt;</b> to create a consumer,
                        offering code points stored in a range by two pointers.
                        <b>T</b> could be could be <b>wchar_t</b>, <b>char8_t</b>, <b>char16_t</b>, <b>char16be_t</b> or <b>char32_t</b>.
                    </li>
                </ul>
            </p>
            <p>
                When you have a string consumer to offer code points to be converted,
                use <b>UtfToUtfReaderBase&lt;TFrom, TTo, TConsumer, TConsumerRedirection&lt;T&gt;&gt;</b> to create a reader.
                <b>TFrom</b> and <b>TTo</b> could be could be <b>wchar_t</b>, <b>char8_t</b>, <b>char16_t</b>, <b>char16be_t</b> or <b>char32_t</b>.
                <b>TConsumerRedirection</b> is optional.
                <ul>
                    <li>
                        Use <b>UtfStringToStringReader&lt;TFrom, TTo&gt;</b> to create a reader,
                        convert code points stored in a zero-terminated pointer.
                    </li>
                    <li>
                        Use <b>UtfStringRangeToStringRangeReader&lt;TFrom, TTo&gt;</b> to create a reader,
                        convert code points stored in a range by two pointers.
                    </li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>Containers and collections operations</title>
            <p>In namespace <b>::vl::collections</b>,</p>
            <p>
                <ul>
                    <li><b>Array&lt;T&gt;</b>, <b>List&lt;T&gt;</b>, <b>SortedList&lt;T&gt;</b>, <b>Dictionary&lt;K, V&gt;</b>, <b>Group&lt;K, V&gt;</b>: linear containers.</li>
                    <li><b>LazyList&lt;T&gt;</b>: Lazy evaluated read-only containers with rich operations, similar to Linq.</li>
                    <li><b>PartialOrderingProcessor</b>: Partial ordering and strong connected component discovering.</li>
                    <li><b>GroupInnerJoin</b> function for doing inner join on two <b>Group</b> containers.</li>
                    <li><b>for (auto VAR : COLLECTION)</b> and <b>for (auto [VAR, INDEX] : indexed(COLLECTION))</b> for iterating containers.</li>
                    <li><b>Range&lt;T&gt;</b>: Convert a range to a <b>LazyList&lt;T&gt;</b>.</li>
                    <li><b>From</b>: Convert array, pointer range or collection types to <b>LazyList&lt;T&gt;</b>.</li>
                    <li><b>BinarySearchLambda</b>: Find an item in a sorted array, returning the position of the item, and the position to insert the item.</li>
                    <li><b>Sort</b> and <b>SortLambda</b>: Sort items in an array.</li>
                    <li>And more ...</li>
                </ul>
            </p>
            <p>
                Members of <b>LazyList&lt;T&gt;</b>:
                <ul>
                    <li>Collection functions: <b>Select</b>, <b>SelectMany</b>, <b>Where</b>, <b>Where</b>, <b>GroupBy</b>, <b>FindType</b>, <b>OrderBy</b>, <b>OrderByKey</b>, <b>OrderBySelf</b>.</li>
                    <li>Aggregation functions: <b>Aggregate</b>, <b>All</b>, <b>Any</b>, <b>Max</b>, <b>Min</b>, <b>First</b>, <b>FirstOrDefault</b>, <b>Last</b>, <b>LastOrDefault</b>, <b>Count</b>, <b>IsEmpty</b>.</li>
                    <li>Projection functions: <b>Concat</b>, <b>Take</b>, <b>Skip</b>, <b>Repeat</b>, <b>Distinct</b>, <b>Reverse</b>.</li>
                    <li>Set functions: <b>Pairwise</b>, <b>Intersect</b>, <b>Except</b>, <b>Union</b>.</li>
                    <li>And more ...</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>Console I/O</title>
            <p>In namespace <b>::vl::console</b>,</p>
            <p>
                Simple string reading and writing for command-line applications.
                Character encodings are correctly handled for stream redirections.
            </p>
        </topic>
        <topic>
            <title>Unit test framework</title>
            <p>In namespace <b>::vl::unittest</b>,</p>
            <p>
                An easy-to-use unit test framework.
                You are able to organize test cases in nested categories,
                and either run all the way to the end,
                or tell the IDE to stop at the first failed test assertion.
            </p>
            <p>
                Calling <b>UnitTest::RunAndDisposeTests</b> to start a unit test CLI application and the following CLI arguments are supported by default:
                <ul>
                    <li><b>/D</b>: Debug mode, it will crash at the first error.</li>
                    <li><b>/R</b>: Release mode, it will crash at the first error.</li>
                    <li><b>/F:FileName.cpp</b>: Only run test cases defined in this file. Multiple instances are allowed at the same time to execute a specified group of files.</li>
                </ul>
                <b>/D</b> and <b>/R</b> are exclusive. If none of them are offered, on Windows <b>/D</b> is activated if a debugger is attached to the process from the beginning.
            </p>
            <p>
                In order to test code that is aware of the current date time.
                <b>vl::InjectDateTimeImpl</b> could be used to control the implementation of <b>vl::DateTime</b>.
            </p>
        </topic>
    </topic>
</article>