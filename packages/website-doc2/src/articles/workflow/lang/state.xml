<article index="true">
    <topic>
        <title>State Machines</title>
        <p>
            A state machine works like a coroutine,
            but unlike coroutine which only has <b>Resume</b>,
            a state machine could have multiple strong-typed inputs.
        </p>
        <p>
            A state machine is a class.
            It must inherit from <b>system::StateMachine</b>
            The last member must be <b>$state_machine { ... }</b>.
        </p>
        <p>
            A state machine defines multiple states with arguments.
            The entry state is called <b>default</b>.
            <b>$goto_state</b> and <b>$push_state</b> could be use for jump between states.
        </p>
        <p>
            A state machine defines multiple strong-typed inputs.
            The state machine is driven by input.
            When a <b>$switch</b> state is executed,
            it waits for selected inputs.
            A required input method must be called to resume the state machine.
        </p>
        <p>
            Let's start with an example:
            <program><code><![CDATA[
                module sampleModule;

                using system::*;

                class MySM : StateMachine
                {
                    prop Output: string = "" {not observe}

                    func Append(text: string): void
                    {
                        Output = $"$(Output)$(text); ";
                    }

                    $state_machine
                    {
                        $state_input A(name: string);
                        $state_input B(name: string);

                        $state WaitForName()
                        {
                            $switch ()
                            {
                            case A(name):
                                {
                                    Append($"A($(name))");
                                }
                            case B(name):
                                {
                                    Append($"B($(name))");
                                }
                            }
                        }

                        $state default()
                        {
                            Append("First line");
                            $push_state WaitForName();
                            Append("Last line");
                        }
                    }
                }

                func main(): string
                {
                    var sm = new MySM^();
                    try
                    {
                        sm.A("John");
                        sm.B("Smith");
                    }
                    catch (ex)
                    {
                        sm.Append(ex.Message);
                    }
                    return sm.Output;
                }
            ]]></code></program>
            The <b>main</b> function returns <b>"First line; A(John); Last line; The state machine has been stopped.; "</b>.
        </p>
        <p>
            <ul>
                <li>
                    <b>new MySM^()</b> is executed,
                    the state machine is not started.
                </li>
                <li>
                    <b>sm.A("John");</b> is executed.
                    Because this is the first time a <b>$state_input</b> is called,
                    the state machine starts.
                </li>
                <li>
                    The entry state of a state machine is <b>default</b>,
                    it immediately enters <b>$state default()</b>.
                    <b>"First line; "</b> is printed.
                </li>
                <li>
                    <b>$push_state WaitForName()</b> is executed,
                    it jumps to <b>$state WaitForName()</b>.
                </li>
                <li>
                    It is supposed to stop at <b>$switch</b>.
                    But because <b>A</b> has not been consumed,
                    the state machine continues and choose <b>case A(name):</b>.
                    <b>"A(John)"</b> is printed.
                </li>
                <li>
                    Now <b>$state WaitForName()</b> finishes.
                    Because the state machine jumps to this state via <b>$push_state</b>,
                    so it still needs to go back to <b>$state default</b>.
                    <b>"Last line;"</b> is printed.
                </li>
                <li>
                    The state machine stops.
                </li>
                <li>
                    <b>sm.B("Smith");</b> is executed,
                    because the state machines has stopped,
                    it throws an exception.
                </li>
            </ul>
        </p>
        <p>
            <b>$state</b> defines states.
            <b>$state_input</b> defines inputs from outside.
            State machines have more freedom in exchanging data comparing to coroutines.
        </p>
    </topic>
</article>