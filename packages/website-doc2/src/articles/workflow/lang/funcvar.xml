<article index="true">
    <topic>
        <title>Functions and Variables</title>
        <p>
            Functions and variables can be defined in <b>modules</b>, <b>namespaces</b> and <b>classes</b>.
        </p>
        <topic>
            <title>Variable</title>
            <p>
                A variable could be
                <program><code><![CDATA[
                    var a = "Hello";
                    var b: string = "Hello";
                ]]></code></program>
            </p>
            <p>
                The type is optional, when it can be inferred from the initializer.
            </p>
            <p>
                Type inferring is available for most expressions,
                but there are still a few kinds of expression which don't have an explicit type.
                Like <b>null</b>.
                In this case, you have two choices,
                one is to specify the variable type,
                another one is to specify the expression type:
                <program><code><![CDATA[
                    var a: MyClass = null;
                    var b = null of MyClass;
                ]]></code></program>
            </p>
            <p>
                The initializer can be any expression,
                it cannot be omitted.
            </p>
            <p>
                Multiple variables cannot share the same name in one scope,
                but variables can hide other variables in parent scopes.
            </p>
            <p>
                <b>IMPORTANT</b>:
                When a variable is class member,
                the type cannot be omitted.
            </p>
        </topic>
        <topic>
            <title>Function</title>
            <p>
                Here is an example:
                <program><code><![CDATA[
                    func main(): string
                    {
                        return "Hello, world!";
                    }
                ]]></code></program>
            </p>
            <p>
                This function is called <b>main</b>.
                Multiple variables could share the same name in one scope,
                this is overloading.
                When such functions are called,
                One of them is picked according to argument types.
            </p>
            <p>
                The return type and the function body cannot be omitted.
            </p>
            <p>
                Functions are allowed to have parameters:
                <program><code><![CDATA[
                    func add(x: int, y: int): int
                    {
                        return x + y;
                    }
                ]]></code></program>
            </p>
            <p>
                Two arguments are required to call this function:
                <program><code><![CDATA[
                    add(1, 2);
                ]]></code></program>
            </p>
            <p>
                There is no default value for any parameter.
                Function overloading is recommended to simulate default values for parameters.
            </p>
            <p>
                When the return type of a function is <b>void</b>,
                any <b>return</b> statement in this function is not allowed to have an expression.
                When the return type is not <b>void</b>,
                any <b>return</b> statement in this function must have an expression.
            </p>
            <p>
                The compiler does not check if any exit point of a function is missing a return value.
                If a function exits without a return value,
                it returns <b>null</b>.
                If the return type is not compatible with <b>null</b>,
                no error will be generated during compiling,
                it is an undefined behavior.
            </p>
            <p>
                When such code is generated to C++,
                the C++ compiler will tell you that it is wrong.
            </p>
        </topic>
        <topic>
            <title>Overloading Resolution</title>
            <p>
                Firstly,
                only functions whose have the correct number of parameters are valid candidates,
                because there is no default value for parameters.
            </p>
            <p>
                Secondly,
                function arguments are used to pick one from overloaded functions.
                But not all arguments are used,
                because some of them does not have explicit types:
                <ul>
                    <li>
                        Unresolved name:
                        Some objects, like enum items,
                        are not always required to specify the enum type.
                        Because the place accepting this expression may already have a known type.
                    </li>
                    <li>
                        Ordered lambda expression with arguments:
                        Parameter types are not allowed on parameters of order lambda expressions,
                        so when it has arguments, the type of such lambda expression is not clear.
                    </li>
                    <li>
                        <b>null</b>: it could be any reference type.
                    </li>
                    <li>
                        <b>{ field:value ... }</b>: it could be any struct type.
                    </li>
                    <li>
                        <b>EXPR as *</b>: the type is inferred by the place accepting this expression.
                    </li>
                </ul>
            </p>
            <p>
                After all arguments with explicit types are recognized,
                each valid candidate is examined by counting the number of arguments that need type conversions.
            </p>
            <p>
                During the examination,
                some functions may end up being discarded
                because arguments type are not appropriate.
                For example, passing <b>null</b> to an <b>int</b> parameter.
            </p>
            <p>
                In the reduced candidate list,
                we pick one that has minimum numbers of argument type conversions.
                If there are more than one,
                then an error is generated.
            </p>
            <p>
                For example:
                <program><code><![CDATA[
                    class Base {}
                    class Derived: Base{}

                    func F(x: Base^): void {}
                    func F(x: Derived^): void {}
                ]]></code></program>
                <b>F(new Derived^())</b> will always pick the second one,
                because the first one needs 1 type conversion,
                but the second needs 0 type conversion.
                The second one wins.
            </p>
        </topic>
    </topic>
</article>