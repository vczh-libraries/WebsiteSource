<article index="true">
    <topic>
        <title>Statements</title>
        <p>
            All supported statements are listed below.
        </p>
        <topic>
            <title>if-else</title>
            <p>
                The condition must be contained in round parentheses.
            </p>
            <p>
                <b>if (condition) { ... }</b> only executes statements in braces when <b>condition</b> is <b>true</b>.
            </p>
            <p>
                <b>if (condition) { ... } else {... } </b> executes statements in the first braces when <b>condition</b> is <b>true</b>.
            </p>
            <p>
                <b>if (condition) { ... } else {... } </b> executes statements in the second braces when <b>condition</b> is <b>false</b>.
            </p>
            <p>
                When <b>condition</b> is a readonly variable instead of an expression: <b>var VAR: TYPE = EXPR</b>,
                <b>TYPE</b> must be any pointer type or optional type,
                and the condition is evaluated to <b>true</b> when <b>VAR</b> is not null.
            </p>
        </topic>
        <topic>
            <title>switch-case</title>
            <p>
                For any statement like: <b>switch (expression) { case VALUE1: { S1 } case VALUE1: { S1 } ... default: { S } }</b>:
            </p>
            <p>
                When <b>expression == VALUE1</b> is <b>true</b>, it executes <b>S1</b>.
            </p>
            <p>
                When <b>expression == VALUE2</b> is <b>true</b>, it executes <b>S2</b>.
            </p>
            <p>
                When any values fail, it executes <b>S</b>.
            </p>
            <p>
                There can be any number of <b>case</b> branches.
            </p>
            <p>
                The <b>default</b> branch is optional.
            </p>
        </topic>
        <topic>
            <title>for-in</title>
            <p>
                See <b>Collection types</b> in <a href="/workflow/lang/type.html#Collection-types">Types</a>.
            </p>
        </topic>
        <topic>
            <title>while</title>
            <p>
                <b>while (condition) {...}</b> evaluates <b>condition</b>.
            </p>
            <p>
                When it is true, executes statements and do the whole thing again.
            </p>
            <p>
                When it is false, it stops.
            </p>
        </topic>
        <topic>
            <title>goto</title>
            <p>
                <b>goto LABEL;</b> jumps to the <b>LABEL:;</b> statement.
            </p>
            <p>
                <b>goto LABEL;</b> is only allowed to jump to a label in the current function,
                it cannot jump across the boundary of lambda expressions.
            </p>
            <p>
                <b>LABEL:;</b> must be the last statement in any braces.
                The name <b>LABEL</b> must be unique in the current function.
            </p>
        </topic>
        <topic>
            <title>break, continue, return</title>
            <p>
                <b>break;</b> stops the most inner <b>for</b> or <b>while</b> statement.
            </p>
            <p>
                <b>break;</b> stops the current iteration of the most inner <b>for</b> or <b>while</b> statement and starts a new iteration.
            </p>
            <p>
                <b>return;</b> stops the current function.
                If the function returns anything other than <b>void</b>,
                an expression is needed before <b>;</b> to be the return value.
            </p>
        </topic>
        <topic>
            <title>delete</title>
            <p>
                See <a href="/workflow/lang/interface_new.html">Implementing (interface)</a>.
            </p>
            <p>
                See <a href="/workflow/lang/class_new.html">Allocating (class)</a>.
            </p>
        </topic>
        <topic>
            <title>raise</title>
            <p>
                <b>raise OBJECT;</b> raises an expression.
            </p>
            <p>
                <b>OBJECT</b> must be <b>string</b> or <b>system::Exception^</b>.
            </p>
        </topic>
        <topic>
            <title>try-catch-finally</title>
            <p>
                <b>try { A } catch(ex) { B }</b> executes <b>A</b>.
                When an exception is thrown during excuting <b>A</b>,
                <b>A</b> stops immediately,
                the exception stores in <b>ex</b> and executes <b>B</b>.
            </p>
            <p>
                <b>try { A } catch(ex) { B } finally { C }</b> executes <b>A</b>.
                When an exception is thrown during excuting <b>A</b>,
                <b>A</b> stops immediately,
                the exception stores in <b>ex</b> and executes <b>B</b>.
                After <b>A</b> or <b>B</b> is executed,
                whether an exception is thrown or not,
                <b>C</b> will be executed.
            </p>
            <p>
                The type of <b>ex</b> is <b>system::Exception^</b>.
            </p>
        </topic>
    </topic>
</article>