<article>
    <topic>
        <title>Welcome to Gaclib Document!</title>
        <p>
            Gaclib consists of the following libraries:
        </p>
        <topic>
            <title>Github Copilot Supports</title>
            <p>
                <a href="https://github.com/vczh-libraries/GacUI/blob/master/.github/copilot-instructions.md">.github/copilot-instructions.md</a>
            </p>
            <p>
                This is a github copilot prompts that is current being working on.
                Besides some instructions for GacUI development,
                it also contains brief documents for each library.
                It would be helpful for not only you, but also your AI.
            </p>
        </topic>
        <topic>
            <title>Vlpp: Much more easier to deal with data</title>
            <p>
                Click <a href="/vlpp/ref.html">here</a> for API references.
            </p>
            <p>
                <ul>
                    <li>string</li>
                    <li>shared pointer</li>
                    <li>functional constructions</li>
                    <li>containers and Linq</li>
                    <li>simple console read/write operations</li>
                    <li>simple unit test framework</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>VlppOS: Access basic OS features easily</title>
            <p>
                Click <a href="/vlppos/ref.html">here</a> for API references.
            </p>
            <p>
                <ul>
                    <li>system locale access</li>
                    <li>threading and synchronization</li>
                    <li>HTTP client (Windows only)</li>
                    <li>file access</li>
                    <li>text encoding detection, serialization and deserialization</li>
                    <li>streaming and redirection</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>VlppRegex: A fast C++ regular expression implementation</title>
            <p>
                Click <a href="/vlppregex/ref.html">here</a> for API references.
            </p>
            <p>
                <ul>
                    <li>No backtracking at all regardless how you write the regular expression, if no capturing is required.</li>
                    <li>Matching multiple regular expressions at the same time, if no capturing is required.</li>
                    <li>Easy to build your lexical analyzer.</li>
                    <li>Anonymous capturing and named capturing</li>
                    <li>Sub-expression renaming</li>
                </ul>
            </p>
            <p>
                <b>IMPORTANT:</b>
                This regular expression library has little but critical differences about character escaping,
                comparing to other regular expression implementation:
                <ul>
                    <li><b>"."</b> matches the "." character</li>
                    <li><b>"\."</b> matches any character</li>
                    <li>
                        <b>both "\" and "/"</b> starts a character escaping,
                        which means <b>"\d+"</b> and <b>"/d+"</b> are exactly the same.
                        This helps a lot when a regular expression is written in C++ string literal.
                    </li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>VlppReflection: Reflection utilities for C++ Classes</title>
            <p>
                Click <a href="/vlppreflection/ref.html">here</a> for API references.
            </p>
            <p>
                <ul>
                    <li>primitive types</li>
                    <li>strings</li>
                    <li>functions</li>
                    <li>raw or shared pointers</li>
                    <li>containers</li>
                    <li>structs</li>
                    <li>classes</li>
                    <li>interfaces</li>
                    <li>enums</li>
                </ul>
            </p>
            <p>
                For classes, you need to inherit <name>vl::reflection::Description&lt;YourClass&gt;</name> or <name>vl::reflection::AggregatableDescription&lt;YourClass&gt;</name> to enable reflection.
                For interfaces, you need to inherit <name>vl::reflection::IDescriptable</name> to enable reflection.
                At the end, a set of macros need to be called to register all reflectable types and members.
            </p>
        </topic>
        <topic>
            <title>VlppParser: GLR Parser Generator</title>
            <p>
                Click <a href="/vlppparser/ref.html">here</a> for API references.
            </p>
            <p>
                This library is deprecated but still included in GacUI 2.0, please use <b>VlppParser2</b> instead.
            </p>
            <p>
                You are able to write the syntax in a text file,
                and then run <name>ParserGen.exe</name> to generated parser, AST with traverse algorithms in C++.
                You also automatically get predefined parsers and printers for <b>XML and JSON</b>.
            </p>
        </topic>
        <topic>
            <title>VlppParser2: GLR Parser Generator</title>
            <p>
                Click <a href="/vlppparser2/ref.html">here</a> for API references.
            </p>
            <p>
                You are able to write the syntax in a text file,
                and then run <name>GlrParserGen.exe</name> to generated parser, AST with traverse algorithms in C++.
                You also automatically get predefined parsers and printers for <b>XML and JSON</b>.
            </p>
        </topic>
        <topic>
            <title>Workflow: A script language and runtime for interop with C++ classes</title>
            <p>
                Click <a href="/workflow/ref.html">here</a> for API references.
            </p>
            <p>
                After compiling the script, you are able to:
                <ul>
                    <li>Call reflectable C++ classes natively from the script.</li>
                    <li>Execute the script directly.</li>
                    <li>Save or load the compiled binary.</li>
                    <li>
                        Generate the script to C++ code to get a significant performance improvement,
                        without having to bring the runtime.
                    </li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>GacUI: Cross platform GPU Accelerated UI Library</title>
            <p>
                Click <a href="/gacui/ref.html">here</a> for API references.
            </p>
            <p>
                GacUI has a high performance and extensible framework,
                to enable porting to different platform using different rendering engine.
                At this moment,
                GacUI could run on Windows, macOS and Linux.
                More platforms will be added to the supported list in GacUI 2.0.
            </p>
            <p>
                GacUI also has a rich set of layouts, controls, skins and data bindings.
                <ul>
                    <li>
                        Layouts
                        <ul>
                            <li>
                                <b>Bounds</b>: Stick to some or all sides of the parent layout,
                                with the ability to do absolute layout.
                            </li>
                            <li>
                                <b>Stack</b>: Stack sub-layouts together in different directions.
                            </li>
                            <li>
                                <b>Flow</b>: Place sub-layouts in one line, and when the space of the parent layout is not enough,
                                new lines will be created automatically.
                                This can be done in different directions.
                            </li>
                            <li>
                                <b>Table</b>: Place sub-layouts in a table,
                                with different row/column configurations to perform a very flexible layout.
                                Table is used widely in GacUI,
                                and the performance is super high,
                                you don't even need to worry about slowing down your application by putting too many layouts in nested tables.
                            </li>
                            <li>
                                <b>Side</b> and <b>PartialView</b>: Place sub-layouts and expand them to a specified percentage of the space of the parent layout.
                            </li>
                            <li>
                                <b>SharedSizeItem</b> and <b>SharedSizeRoot</b>: Control sub-layouts in different layouts to have the same width or height.
                                It is very useful when you need to align icons, texts and shortcuts in a menu,
                                but they cannot just be put in a table,
                                because icon, text and shortcut are grouped by menu item controls.
                            </li>
                            <li>
                                <b>RepeatStack</b> and <b>RepeatFlow</b>: Bindable Stack and Flow layout.
                            </li>
                            <li>
                                <b>RepeatFreeHeightItem</b>, <b>RepeatFixedHeightItem</b>, <b>RepeatFixedHeightMultiColumnItem</b> and <b>RepeatFixedSizeMultiColumnItem</b>: Layout implementation for <b>GuiListControl::IItemArranger</b>.
                            </li>
                            <li>
                                <b>Responsive</b>: Place sub-layouts in a Responsive layout,
                                and when the size of the responsive layout get changed,
                                sub-layouts will be organized differently with different appearance,
                                according to how large the space is given.
                                Ribbon controls are a very good example of using Responsive layout.
                            </li>
                        </ul>
                    </li>
                    <li>
                        <p>
                            Controls:
                            <ul>
                                <li>Window, Tooltip, CustomControl</li>
                                <li>Button, CheckBox, RadioButton, GroupBox, Label</li>
                                <li>Scroll, Tracker, ScrollView, ProgressBar, Tab</li>
                                <li>DatePicker, DateComboBox</li>
                                <li>TextList, CheckList, RadioList, ListView, TreeView, DataGrid, ComboBox</li>
                                <li>SinglelineTextBox, MultilineTextBox</li>
                                <li>DocumentLabel, DocumentTextBox, DocumentViewer</li>
                                <li>ToolstripMenuBar, ToolstripToolBar, ToolstripToolBarInMenu, ToolstripButton, ToolstripDropDownButton, ToolstripSplitButton, ToolstripSplitter, ToolstripSplitterInMenu</li>
                                <li>RibbonTab, RibbonGroup, RibbonButtons, RibbonToolstrips, RibbonToolstripMenu</li>
                                <li>RibbonIconLabel, RibbonSmallIconLabel</li>
                                <li>RibbonGallery, RibbonGalleryList, RibbonGalleryItemList</li>
                                <li>RibbonSmallButton, RibbonSmallDropdownButton, RibbonSmallSplitButton, RibbonLargeButton, RibbonLargeDropdownButton, RibbonLargeSplitButton</li>
                                <li>RibbonSplitter, RibbonToolstripHeader</li>
                            </ul>
                        </p>
                        <p>
                            Controls and applications are able to be separated into multiple resource files.
                            Here is a demo showing how to share code between two RichEdit application using traditional tool bars and ribbon controls:
                            <ul>
                                <li><a href="https://github.com/vczh-libraries/Release/tree/master/Tutorial/GacUI_Controls/DocumentEditor">Shared code</a>: a customized control providing RichEdit features.</li>
                                <li>Using <a href="https://github.com/vczh-libraries/Release/tree/master/Tutorial/GacUI_Controls/DocumentEditorToolstrip">traditional tool bars</a> to create a RichEdit application using the first project.</li>
                                <li>Using <a href="https://github.com/vczh-libraries/Release/tree/master/Tutorial/GacUI_Controls/DocumentEditorRibbon">ribbon controls</a> to create a RichEdit application using the first project.</li>
                            </ul>
                        </p>
                        <p>
                            <img src="/demo_DET.png"/>
                        </p>
                        <p>
                            <img src="/demo_DER.png"/>
                        </p>
                    </li>
                    <li>
                        <p>
                            Skins: GacUI is released with DarkSkin as a default skin.
                            You could create your own skin, or just use DarkSkin to create your application.
                            Please note that a GacUI application has to start with a skin.
                        </p>
                        <p>
                            Both control and list item accept skins, called ControlTemplate and ItemTemplate.
                            For example, you are able to customize how data is displayed in a list control using ItemTemplate.
                            You are also able to customize how the control itself renderers using ControlTemplate.
                            ItemTemplate and ControlTemplate can be created using XML, just like normal UI components.
                        </p>
                        <p>
                            <a href="https://github.com/vczh-libraries/GacUI/tree/master/Source/Skins/DarkSkin">Here</a> is the source code of the built-in skin: DarkSkin.
                        </p>
                        <p>
                            <a href="https://github.com/vczh-libraries/Release/tree/master/Tutorial/GacUI_Controls/TriplePhaseImageButton">Here</a> is the demo showing
                            how to use image resource, control template and customized control together
                            to create a new control: triple-phase image button.
                        </p>
                        <p>
                            <img src="/demo_TPIB.png"/>
                        </p>
                    </li>
                    <li>
                        <p>
                            Data Bindings: GacUI has a very powerful data binding feature.
                            You are able to
                            <ul>
                                <li>create windows, layouts, controls and skins in XML</li>
                                <li>define view models in Workflow</li>
                                <li>bind view model properties to GacUI controls bidirectionally using complex expressions that you could even not imagine</li>
                                <li>implement view models in C++</li>
                            </ul>
                            and finally bring them together to work.
                        </p>
                        <p>
                            In GacUI controls, there are two kind of properties that accept data binding:
                            <ul>
                                <li>Normal properties that accepts reflectable types</li>
                                <li>
                                    Some of type <name>vl::reflection::descriptions::Value</name>.
                                    These properties accepts container types, usually called <name>ItemSource</name> in bindable list controls.
                                    If you assign a <name>vl::reflection::descriptions::IValueObservableList</name> object to this property,
                                    which can be obtained by calling <name>BoxParameter</name> on a <name>vl::collections::ObservableList</name> object,
                                    list items will change when the list object is changed.
                                </li>
                            </ul>
                        </p>
                        <p>
                            <a href="https://github.com/vczh-libraries/Release/tree/master/Tutorial/GacUI_Controls/AddressBook">Here</a> is a demo showing
                            how to bind a object model to a tree view control, a list view control with customized items.
                        </p>
                        <p>
                            <img src="/demo_AB.png"/>
                        </p>
                    </li>
                </ul>
            </p>
            <p>
                Demos of full GacUI features can be found <a href="//demo.html">here</a>.
            </p>
        </topic>
    </topic>
</article>