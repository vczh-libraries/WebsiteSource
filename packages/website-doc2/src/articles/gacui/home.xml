<article>
    <topic>
        <title>Introduction to GacUI</title>
        <p>
            GacUI is a high performance cross-platform C++ UI library with built-in
            <ul>
                <li>rich control libraries</li>
                <li>powerful layout mechanism</li>
                <li>control/item template mechanism</li>
                <li>reactive design</li>
                <li>object/list/tree data binding</li>
                <li>MVVM support</li>
            </ul>
        </p>
        <p>
            GacUI XML Resource is an recommended to build a GacUI application.
            The provided toolchain consumes GacUI XML Resource and output:
            <ul>
                <li>
                    <p>
                        A compiled binary resource format.
                    </p>
                    <p>
                        Such binary files contain only resources like
                        text, image, rich text documents, etc.
                    </p>
                </li>
                <li>
                    <p>
                        Per-platform compiled <b>Workflow</b> assemblies. <b>(unrecommended)</b>
                    </p>
                    <p>
                        These assemblies are compiled from XML descripted
                        UIs, animations, localed texts, etc.
                    </p>
                    <p>
                        You need to know what CPU platform the application is running one
                        to load the correct assembly file at runtime.
                        Reflection must be enabled in order to execute the assembly.
                    </p>
                </li>
                <li>
                    <p>
                        C++20 files translated from above assemblies. <b>(recommended)</b>
                    </p>
                    <p>
                        These C++ files are compiled from XML descripted
                        UIs, animations, located texts, etc.
                    </p>
                    <p>
                        If all UI objects are known and no code need to be dynamically downloaded,
                        instead of loading assemblies with reflection enabled at runtime,
                        you can link all generated C++ code with your application
                        <b>to avoid enabling Reflection</b>.
                    </p>
                    <p>
                        In this way your application could start very quickly
                        and reduce 90% of the binary size.
                    </p>
                </li>
            </ul>
        </p>
        <topic>
            <title>Supported Platforms</title>
            <p>
                These platforms are supported at this moment:
            </p>
            <topic>
                <title>Native Platforms</title>
                <p>
                    <ul>
                        <li>
                            <b>Win32 Subsystem</b>: You could use either GDI or Direct2D 1.0/1.1 to render UI.
                            <ul>
                                <li>SetupWindowsDirect2DRenderer();</li>
                                <li>SetupWindowsGDIRenderer();</li>
                            </ul>
                        </li>
                        <li>
                            <b>Linux</b>: Finished but you have to built toolchain by yourself. (<a href="https://github.com/vczh-libraries/gGac">https://github.com/vczh-libraries/gGac</a>)
                            <ul>
                                <li>SetupGtkRenderer();</li>
                            </ul>
                        </li>
                        <li>
                            <b>macOS</b>: Finished but still in 1.0, not catching up with the latest version at this moment. (<a href="https://github.com/vczh-libraries/iGac">https://github.com/vczh-libraries/iGac</a>)
                            <ul>
                                <li>SetupOSXCoreGraphicsRenderer();</li>
                            </ul>
                        </li>
                    </ul>
                </p>
                <p><img src="/Platform_1.png"/></p>
            </topic>
            <topic>
                <title>Hosted Mode</title>
                <p>
                    Apply to any native implementation, making all windows in GacUI rendered in one native window.
                    <ul>
                        <li>SetupHostedWindowsDirect2DRenderer();</li>
                        <li>SetupHostedWindowsGDIRenderer();</li>
                    </ul>
                </p>
                <p><img src="/Platform_2.png"/></p>
            </topic>
            <topic>
                <title>Remote Protocols (core and renderer)</title>
                <p>
                    It allows a GacUI application to run in two different binaries: core and renderer. You could run them in exe-dll, or in two different processes.
                    In the near future, GacUI will release a renderer implementation in TypeScript, allow a GacUI application to be rendered in a browser.
                    At that moment, the core could be a background process, or even a WASM binary also running in the browser.
                </p>
                <p>
                    GacUI will not offer any predefined implementation of communitation between two binaries,
                    but serialization of the remote protocol will be offered in JSON (ready) and binary (not yet ready).
                </p>
                <p>
                    <ul>
                        <li>
                            <b>Remote Protocol (core)</b>: Apply <b>hosted mode</b> to it, making GacUI running in a virtual environment, communicating with a renderer with commands, through any protocol that defined by you.
                            <ul>
                                <li>SetupRemoteNativeController(IGuiRemoteProtocol*);</li>
                            </ul>
                        </li>
                        <li>
                            <b>Remote Protocol (renderer)</b>: Apply to any native implementation, communicating with <b>Remote Protocol (core)</b>, through any protocol that defined by you.
                            <ul>
                                <li>SetupRawWindowsDirect2DRenderer();</li>
                                <li>SetupRawWindowsGDIRenderer();</li>
                            </ul>
                        </li>
                    </ul>
                </p>
                <p><img src="/Platform_3.png"/></p>
            </topic>
            <topic>
                <title>Remote Protocols (with your protocols)</title>
                <p>
                    An example of remote protocol implementation using JSON.
                </p>
                <p>
                    Test applications on Windows with Named Pipe:
                    <a href="https://github.com/vczh-libraries/GacUI/blob/master/Test/GacUISrc/RemotingTest_Core/NamedPipeCoreChannel.cpp">Core</a> and
                    <a href="https://github.com/vczh-libraries/GacUI/blob/master/Test/GacUISrc/RemotingTest_Rendering_Win32/NamedPipeRendererChannel.cpp">Renderer</a>.
                    After the remote protocol completes, they will be moved to the <b>Release</b> repo.
                </p>
                <p><img src="/Platform_4.png"/></p>
            </topic>
            <topic>
                <title>In the future ...</title>
                <p>
                    In the future, more platforms will be included in GacUI like:
                    <ul>
                        <li>UWP</li>
                        <li>WASM running on browsers</li>
                        <li>Command-line interface applications</li>
                        <li>etc ...</li>
                    </ul>
                </p>
            </topic>
        </topic>
        <topic>
            <title>In this topic ...</title>
            <p>
                <ul>
                    <li>
                        <a href="/gacui/running.html">Build your first GacUI Application!</a>:
                        A step-by-step tutorial for creating a GacUI application.
                    </li>
                    <li>
                        <a href="/gacui/kb/home.html">Knowledge Base</a>:
                        Basic concepts to know before learning GacUI.
                    </li>
                    <li>
                        <a href="/gacui/xmlres/home.html">GacUI XMl Resource</a>:
                        A complete guide for GacUI XML Resource.
                    </li>
                    <li>
                        <a href="/gacui/components/home.html">GacUI Components</a>:
                        A complete guide for all GacUI objects like
                        elements, compositions, controls, templates and components.
                    </li>
                    <li>
                        <a href="/gacui/advanced/home.html">Advanced Topics</a>:
                        Details about advanced features and patterns for GacUI.
                    </li>
                </ul>
            </p>
        </topic>
    </topic>
</article>