<article>
    <topic>
        <title>Introduction to VlppReflection</title>
        <p>
            VlppReflection provides runtime reflection for C++ types.
        </p>
        <p>
            If a project includes VlppReflection source code,
            it doesn't necessarily mean that the project uses reflection at runtime,
            because reflectable class must inherits from <b>Description&lt;T&gt;</b> or <b>AggregatableDescription&lt;T&gt;</b>,
            which are defined in VlppReflection.
        </p>
        <p>
            Such design allow the same source code to be shared acorss projects that with or without reflection at runtime,
            source code that defines reflectable C++ types are required to compile
            regardless whether <b>VCZH_DEBUG_NO_REFLECTION</b> is on or off.
        </p>
        <topic>
            <title>Projects in Gaclib that use reflection</title>
            <p>
                In <b>VlppParser</b> project, generated C++ code from <b>ParserGen.exe</b> will remove type registration code
                when <b>VCZH_DEBUG_NO_REFLECTION</b> is on.
                All generated AST classes from the grammar is reflectable.
            </p>
            <p>
                In <b>VlppParser2</b> project, generated C++ code from <b>GlrParserGen.exe</b> will remove type registration code
                when <b>VCZH_DEBUG_NO_REFLECTION</b> is on.
                All generated AST classes from the grammar is reflectable.
            </p>
            <p>
                In <b>Workflow</b> project, compiler and Workflow script executor rely on reflection,
                so they are moved to separated files.
                When you only use generated C++ code from Workflow script,
                only include part of the file and set <b>VCZH_DEBUG_NO_REFLECTION</b> on.
            </p>
            <p>
                In <b>GacUI</b> project, type registration and GacUI XML resource compiler use reflection,
                so they are moved to separated files.
                When you don't need dynamic resource loading for controls,
                only include part of the file and set <b>VCZH_DEBUG_NO_REFLECTION</b> on.
            </p>
            <p>
                Setting <b>VCZH_DEBUG_NO_REFLECTION</b> on reduces size of reflectable C++ types,
                and significantly reduces 90% of the executable size for GacUI applications.
                This improves performance a lot.
            </p>
        </topic>
        <topic>
            <title>Authoring reflectable C++ types</title>
            <p>In namespace <b>::vl::reflection</b>.</p>
            <p>
                In API naming convention, <b>VlppReflection</b> uses <b>class</b> for reference types, and <b>struct</b> for data type.
                A reference type can only be created and stored in a pointer, it contains fields, methods, properties, events, it also allow inheritance.
                A data type contains only data, there is no methods and events, and inheritance is not allowed.
            </p>
            <p>
                C++ primitive types, important types and containers from <b>Vlpp</b> are all reflectable.
            </p>
            <p>
                A reflectable C++ class must inherit from <b>Description&lt;T&gt;</b> or <b>AggregatableDescription&lt;T&gt;</b>.
                To make a class member reflectable, types that are used in that member should also be reflectable.
            </p>
        </topic>
        <topic>
            <title>Functors</title>
            <p>In namespace <b>::vl::reflection::description</b>.</p>
            <p>
                Only <b>Func&lt;T&gt;</b> is reflectable. Most containers are reflectable.
            </p>
            <p>
                When a functor is boxed, an instance of <b>IValueFunctionProxy</b> is created.
                When a boxed functor is unboxed,
                you don't get the reference to the original <b>Func&lt;T&gt;</b> object,
                instead you get a new <b>Func&lt;T&gt;</b> object that calls this <b>IValueFunctionProxy</b> instance.
            </p>
        </topic>
        <topic>
            <title>Containers</title>
            <p>In namespace <b>::vl::reflection::description</b>.</p>
            <p>
                When a container is boxed at the first time, an instance of <b>IValueEnumerable</b>, <b>IValueArray</b>, <b>IValueList</b> or <b>IValueDictionary</b> is created.
                The same instance will be returned if you box a container for multiple times.
                It depends on the type of the container.
                <b>IValue*</b> types don't affect lifecycles of original container objects.
                If you use an <b>IValue*</b> instance after its original container object is deleted,
                it will crash.
            </p>
            <p>
                Boxing multiple <b>LazyList&lt;T&gt;</b> creates different instances of <b>IValueEnumerable</b>.
            </p>
            <p>
                Unboxing a <b>IValue*</b> gets a copy of the container.
                But if such <b>IValue*</b> is boxed from a container,
                unboxing it to the exact same type gets the references of the original container.
            </p>
            <p>
                An <b>IValue*</b> instance could also be created in Workflow script,
                there is no "original container object" in this case.
            </p>
        </topic>
        <topic>
            <title>Boxing and unboxing</title>
            <p>In namespace <b>::vl::reflection::description</b>.</p>
            <p>
                For non-generic types and <b>WString</b>,
                <b>BoxValue</b> and <b>UnboxValue</b> is recommended.
            </p>
            <p>
                For functors and containers,
                <b>BoxParameter</b> and <b>UnboxParameter</b> is required.
                These two function can also box and unbox non-generic types and <b>WString</b>,
                but it is not as convenient as <b>BoxValue</b> and <b>UnboxValue</b>.
            </p>
            <p>
                <b>UnboxParameter</b> returns <b>Unboxed&lt;T&gt;</b>.
            </p>
            <p>
                If a new object is created during <b>UnboxParameter</b>,
                it owns the reference,
                <b>IsOwned</b> returns <b>true</b>,
                the reference to the object will be deleted in <b>Unboxed&lt;&gt;</b>'s destructor.
            </p>
            <p>
                If a reference to an existing object is returned from <b>UnboxParameter</b>,
                it does not own the reference,
                <b>IsOwned</b> returns <b>false</b>,
                the reference to the object will not be deleted in <b>Unboxed&lt;&gt;</b>'s destructor.
                It happens when you box a container to <b>IValue*</b> and unbox to the exact same type.
            </p>
        </topic>
        <topic>
            <title>When to use reflection</title>
            <p>
                You are recommended not to use reflection at runtime if you can.
            </p>
            <p>
                Reflection are mostly built for compiling and running Workflow script.
                A Workflow script class can even inherit from multiple reflectable C++ classes (must inherit from <b>AggregatableDescription</b>).
                In order to do <b>dynamic_cast</b> correctly,
                you are recommended to use the <b>SafeAggregationCast&lt;T&gt;</b> function, which exist in all reflectable C++ classes.
            </p>
            <p>
                Running Workflow script requires reflection to be available,
                while running the generated C++ code from Workflow script does not.
            </p>
            <p>
                In <b>GacUI</b>, all controls in GacUI XML resource files are converted to workflow script files during compiling.
                In order to create these controls,
                you are recommended to use generated C++ code from them directly.
                These are all done by <b>GacBuild.ps1</b>
            </p>
            <p>
                You can load compiled resource files and script files at runtime to create controls,
                but this is not recommended.
            </p>
            <p>
                There are 3 levels of reflection:
                <ul>
                    <li><b>VCZH_DEBUG_NO_REFLECTION</b> preprocessor is defined: There is no runtime reflection.</li>
                    <li><b>VCZH_DEBUG_METAONLY_REFLECTION</b> preprocessor is defined: Only type names are available. You can reload dumped binary files to restore type definitions, but it is metadata only and reflected methods can't be executed.</li>
                    <li>When non of macros above is used: Full runtime reflection features. You can dump types to binary files at this level.</li>
                </ul>
            </p>
        </topic>
    </topic>
</article>