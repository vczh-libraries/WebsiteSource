<article>
    <topic>
        <title>Runtime Instructions</title>
        <p>
            This is for reference only.
            You are not expected to generate instructions by yourself,
            but it could be useful when programming against the Workflow script debugger interface.
        </p>
        <p>
            All instructions are defined in <b>vl::workflow::runtime::WfInsCode</b>.
        </p>
        <p>
            An instruction could have two types of arguments:
            <ul>
                <li><b>Embedded arguments</b>: They are generated at compile time and are saved in fields of <b>vl::workflow::runtime::WfInstruction</b>.</li>
                <li><b>Stack arguments</b>: They are stored in the stack at runtime, most of them will be consumed and removed from the stack after executing the instruction.</li>
            </ul>
            Argument schema of each instructions are defined by static methods of <b>vl::workflow::runtime::WfInstruction</b>.
        </p>
        <p>
            When an instruction is named after, for example, <b>ConvertToType(flag, type)</b>,
            it means the name of the instruction is <b>WfInsCode::ConvertToType</b>,
            and embedded arguments are stored in field <b>flagParameter</b> and <b>typeParameter</b>.
        </p>
        <topic>
            <title>Nop</title>
            <p>
                Stack pattern before:
                <program><code><![CDATA[
                    --> top
                    --> bottom
                ]]></code></program>
            </p>
            <p>
                Stack pattern after:
                <program><code><![CDATA[
                    --> top
                    --> bottom
                ]]></code></program>
            </p>
            <p>
                This instruction does nothing.
            </p>
        </topic>
        <topic>
            <title>LoadValue(value)</title>
            <p>
                Stack pattern before:
                <program><code><![CDATA[
                    --> top
                    --> bottom
                ]]></code></program>
            </p>
            <p>
                Stack pattern after:
                <program><code><![CDATA[
                    --> top
                    value
                    --> bottom
                ]]></code></program>
            </p>
            <p>
                Push a value to the stack.
            </p>
        </topic>
    </topic>
</article>