<article>
    <topic>
        <title>Invoking C++ Classes</title>
        <p>
            Involved files:
            <ul>
                <li><a href="https://github.com/vczh-libraries/Release/blob/master/Tutorial/Console_Workflow/W02_InvokingCppClasses/Main.cpp">Main.cpp</a></li>
            </ul>
        </p>
        <p>
            It is allowed to use reflectable types in Workflow script.
            Here we define a type to read and write from a console window.
            <a href="http://localhost:8080/doc/current/vlppreflection/ref/VL__REFLECTION__DESCRIPTION.html">Registering</a> this class is required,
            but the code will not be pasted here.
        </p>
        <p>
            Firstly we define a reflectable C++ class:
            <program><code><![CDATA[
                namespace myapi
                {
                    class App : public Object, public Description<App>
                    {
                    public:
                        static WString Get()
                        {
                            return Console::Read();
                        }

                        static WString Get(const WString& message)
                        {
                            Console::Write(message);
                            return Console::Read();
                        }

                        static void Print(const WString& text)
                        {
                            Console::WriteLine(text);
                        }
                    };
                }
            ]]></code></program>
        </p>
        <p>
            Secondly, we use this class in the Workflow script:
            <program><code><![CDATA[
                module sampleModule;
                using myapi::*;

                func main(): void
                {
                    var name = App::Get("Please enter your name:");
                    App::Print($"Hello, $(name)!");
                }
            ]]></code></program>
        </p>
        <p>
            Workflow uses wildcard to import names like <b>using myapi::*;</b>.
            In fact, you can use it to use part of a name.
            For example, in GacUI we have <b>vl::presentation::controls::GuiWindow</b>,
            it is registered using <b>presentation::controls::GuiWindow</b>.
            You are able to use <b>Window</b> in the script by <b>using presentation::controls::Window</b>.
        </p>
        <p>
            <b>IMPORTANT</b>:
            although in C++ we are free to create a class in either a raw pointer or a shared pointer,
            but when registering a contructor, a decision must be made.
            Some constructors create raw pointers, some constructors create shared pointers.
        </p>
        <p>
            Here we cannot write <b>new App*()</b> or <b>new App^()</b>,
            because there is no registered contructor.
            But when one constructor is registered,
            and the constructor returns <b>Ptr&lt;App&gt;</b>,
            then only <b>new App^()</b> is allowed.
        </p>
    </topic>
</article>