<article>
    <topic>
        <title>Debugging</title>
        <p>
            Involved files:
            <ul>
                <li><a href="https://github.com/vczh-libraries/Release/blob/master/Tutorial/Console_Workflow/W06_Debugging/Main.cpp">W06_Debugging/Main.cpp</a></li>
            </ul>
        </p>
        <p>
            It is able to debug a running Workflow script, if it is not converted to C++.
            In this section, we will use the debugger to debug this Workflow script:
            <program><code><![CDATA[
                module sampleModule;
                using myapi::*;

                func main(): void
                {
                    var name = App::Get("Please enter your name:");
                    App::Print($"Hello, $(name)!");
                }
            ]]></code></program>
            We will set a break point at <b>App::Print</b>,
            and change the <b>name</b> variable,
            and continue running the script.
        </p>
        <p>
            Firstly, after initializing the assembly, we start debugging:
            <program><code><![CDATA[
                auto debugger = MakePtr<MyDebugger>();
                SetDebuggerForCurrentThread(debugger);
            ]]></code></program>
            <b>MyDebugger</b> inherits <b>WfDebugger</b>, it will be explained later.
        </p>
        <p>
            Secondly, we set a break point:
            <program><code><![CDATA[
                debugger->AddCodeLineBreakPoint(assembly.Obj(), 0, 9, true);
            ]]></code></program>
            "0" means the first file, and "9" means the 10th line,
            which is <b>App::Print($"Hello, $(name)!");</b>.
        </p>
        <p>
            We run the script as usual.
            After the <b>main</b> function is executed,
            we stop debugging:
            <program><code><![CDATA[
                auto mainFunction = LoadFunction<void()>(globalContext, L"main");
                mainFunction();
                SetDebuggerForCurrentThread(nullptr);
            ]]></code></program>
        </p>
        <p>
            Now, before <b>App::Print</b> is called,
            the debugger will be notified.
            Please note that,
            after a break point is triggered,
            if <b>WfDebugger::Run</b> or other similar functions are not called,
            <b>mainFunction() will be blocked forever.</b>
        </p>
        <p>
            In order to take action when a break point is triggered,
            we need to override <b>WfDebugger::OnBlockExecution</b> like this:
            <program><code><![CDATA[
                class MyDebugger : public WfDebugger
                {
                protected:
                    void OnBlockExecution()override
                    {
                        // get the context for the current thread
                        auto context = GetCurrentThreadContext();

                        // whatever the input is, change the "name" variable to be "MyDebugger"
                        // it will print "Hello, MyDebugger!" after continuing
                        auto assembly = context->globalContext->assembly;
                        vint functionIndex = context->GetCurrentStackFrame().functionIndex;
                        auto functionMetadata = assembly->functions[functionIndex];
                        vint indexName = functionMetadata->localVariableNames.IndexOf(L"name");
                        context->StoreLocalVariable(indexName, BoxValue(WString(L"MyDebugger")));

                        // continue
                        Run();
                    }
                };
            ]]></code></program>
        </p>
        <p>
            Details of Workflow runtime API will not be explained here.
            Basically what this function does is that,
            we first get thread context that we are currently debugging against,
            and then use the metadata in the assembly to know how to change the <b>name</b> variable.
            After it is done,
            continue running the script.
        </p>
        <p>
            Since we only set one break point,
            so we don't need to tell which break point is triggered in <b>OnBlockExecution</b>.
        </p>
        <p>
            Here is what we need to know when debugging Workflow scripts:
            <ul>
                <li>A debugger is activated when it is set to a specific thread.</li>
                <li>Same debugger can be set to multiple thread.</li>
                <li>
                    Each call to a function returned from <b>LoadFunction</b> creates a separate <b>WfRuntimeThreadContext</b> object.
                    Do not assume you will always get the same <b>WfRuntimeThreadContext</b> object per thread.
                </li>
            </ul>
        </p>
    </topic>
</article>