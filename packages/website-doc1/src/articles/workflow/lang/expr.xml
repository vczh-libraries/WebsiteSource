<article index="true">
    <topic>
        <title>Expressions</title>
        <p>
            All supported expressions are listed below.
        </p>
        <topic>
            <title>null, true, false</title>
            <p>
                <ul>
                    <li><b>null</b> could be <b>T*</b>, <b>T^</b> or <b>T?</b>.</li>
                    <li><b>true</b> is <b>bool</b>.</li>
                    <li><b>false</b> is <b>bool</b>.</li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>1024, 10.24</title>
            <p>
                For <b>/d+</b>, if the place receiving an interger does not have an explicit type,
                it is <b>int</b>,
                which is <b>Int32</b> when the Workflow compiler is running in a 32-bits process,
                which is <b>Int64</b> when the Workflow compiler is running in a 64-bits process.
                An error is generated if the number exceeds the range supported by the expected type.
            </p>
            <p>
                It is very easy to specify an expected integer type like: <b>0 of UInt64</b>.
            </p>
            <p>
                For <b>/d+./d+</b>, if the place receiving an interger does not have an explicit type,
                it is <b>double</b> when the Workflow compiler is running in a 64-bits process.
                An error is generated if the number exceeds the range supported by the expected type.
            </p>
        </topic>
        <topic>
            <title>"string"</title>
            <p>
                A string can be contained in a pair of <b>'</b> or <b>"</b>.
            </p>
            <p>
                If a string is contained in <b>'</b>, <b>\'</b> represents the <b>'</b> character.
            </p>
            <p>
                If a string is contained in <b>"</b>, <b>\"</b> represents the <b>"</b> character.
            </p>
            <p>
                Character escaping only accepts <b>\r</b>, <b>\n</b> and <b>\t</b> for 3 different space characters just like in C++.
            </p>
            <p>
                For other characters that is following <b>\</b>, it escapes to itself without the <b>\</b> prefix.
                For example, <b>\\</b> becomes <b>\</b>, <b>\X</b> becomes <b>X</b>.
            </p>
        </topic>
        <topic>
            <title>$"$(formatted) string"</title>
            <p>
                If <b>$</b> is put before a string,
                then multiple <b>$(EXPRESSION)</b> could be used inside the string.
            </p>
            <p>
                All these expressions must return a value of types that can be implicitly cast to <b>string</b>.
            </p>
            <p>
                After casting all of them to strings,
                these strings will be put inside the specified position to form a string.
                For example, <b>$"1 + 1 = $(1 + 1)"</b> becomse <b>"1 + 1 = 2"</b>.
            </p>
        </topic>
        <topic>
            <title>Unary operator expression: op VALUE</title>
            <p>
                See <a href="/workflow/lang/expr_unary.html">Unary Operators</a>.
            </p>
        </topic>
        <topic>
            <title>Binary operator expression: VALUE op VALUE</title>
            <p>
                See <a href="/workflow/lang/expr_binary.html">Binary Operators</a>.
            </p>
        </topic>
        <topic>
            <title>If expression: CONDITION ? VALUE : VALUE</title>
            <p>
                <b>C ? A : B</b> returns <b>A</b> when <b>C</b> is <b>true</b>.
            </p>
            <p>
                <b>C ? A : B</b> returns <b>B</b> when <b>A</b> is <b>true</b>.
            </p>
            <p>
                Only one of <b>A</b> or <b>B</b> will be evaluated according to the value of <b>C</b>.
            </p>
            <p>
                But if this is used in <a href="/workflow/lang/bind.html">bind</a> expression,
                both <b>A</b> and <b>B</b> will be evaluated,
                and one of them will be discarded.
            </p>
            <p>
                If <b>A</b> and <b>B</b> are not in the same type,
                then it requires that one must be able to be implicitly cast to another.
            </p>
        </topic>
        <topic>
            <title>Try expression: VALUE ?? DEFAULT</title>
            <p>
                <b>A ?? B</b> returns <b>A</b>.
                If evaluating <b>A</b> results in throwing an exception,
                <b>B</b> is returned instead.
            </p>
            <p>
                If <b>A</b> and <b>B</b> are not in the same type,
                then it requires that one must be able to be implicitly cast to another.
            </p>
        </topic>
        <topic>
            <title>Assignment expression: DESTINATION = VALUE</title>
            <p>
                <b>A = B</b> assigns <b>B</b> to <b>A</b>.
            </p>
            <p>
                If <b>A</b> is a property,
                then the setter function will be called.
            </p>
            <p>
                The result of this expresison is from the evaluation of <b>B</b>.
            </p>
        </topic>
        <topic>
            <title>Ordered lambda expression: [$1 + 1]</title>
            <p>
                This section is under construction.
            </p>
        </topic>
        <topic>
            <title>Lambda expression: func(x: int): int{ return x + 1; }</title>
            <p>
                This section is under construction.
            </p>
        </topic>
        <topic>
            <title>Let expression: let x = 1 in (x + 1)</title>
            <p>
                This section is under construction.
            </p>
        </topic>
        <topic>
            <title>Range expression: range (1, 10)</title>
            <p>
                See <b>Collection types</b> in <a href="/workflow/lang/type.html">Types</a>.
            </p>
        </topic>
        <topic>
            <title>Constructor expression: {a b c}, {a:x b:y c:z}</title>
            <p>
                See <b>Collection types</b> in <a href="/workflow/lang/type.html">Types</a>.
            </p>
            <p>
                See <b>Allocating a struct</b> in <a href="/workflow/lang/struct.html">Structs</a>.
            </p>
        </topic>
        <topic>
            <title>New class expression: new TYPE(ARGUMENTS)</title>
            <p>
                See <a href="/workflow/lang/class_new.html">Allocating (class)</a>.
            </p>
        </topic>
        <topic>
            <title>New interface expression: new TYPE{ MEMBERS }</title>
            <p>
                See <a href="/workflow/lang/interface_new.html">Implementing (interface)</a>.
            </p>
        </topic>
        <topic>
            <title>Mixin new interface expression: new TYPE(using OBJECT)</title>
            <p>
                See <a href="/workflow/lang/interface_using.html">Generic (interface)</a>.
            </p>
        </topic>
        <topic>
            <title>Call expression: FUNCTION(ARGUMENTS)</title>
            <p>
                This section is under construction.
            </p>
        </topic>
        <topic>
            <title>Instance member accessing: OBJECT.MEMBER</title>
            <p>
                This section is under construction.
            </p>
        </topic>
        <topic>
            <title>Static member accessing: OBJECT::MEMBER, ::MEMBER</title>
            <p>
                This section is under construction.
            </p>
        </topic>
        <topic>
            <title>Index expression: CONTAINER[KEY]</title>
            <p>
                This section is under construction.
            </p>
        </topic>
        <topic>
            <title>Null testing expression: OBJECT is null, OBJECT is not null</title>
            <p>
                This section is under construction.
            </p>
        </topic>
        <topic>
            <title>Strong casting expression: cast TYPE OBJECT, cast * OBJECT</title>
            <p>
                This section is under construction.
            </p>
        </topic>
        <topic>
            <title>Weak casting expression: OBJECT as TYPE, OBJECT as *</title>
            <p>
                This section is under construction.
            </p>
        </topic>
        <topic>
            <title>Infer expression: OBJECT of TYPE</title>
            <p>
                This section is under construction.
            </p>
        </topic>
        <topic>
            <title>Event expression: attach(EVENT, FUNCTION), detach(EVENT, HANDLER)</title>
            <p>
                See <b>Using events</b> in <a href="/workflow/lang/interface_prop.html">Properties and Events (interface)</a>.
            </p>
            <p>
                See <b>Using events</b> in <a href="/workflow/lang/class_prop.html">Properties and Events (class)</a>.
            </p>
        </topic>
    </topic>
</article>