<article index="true">
    <topic>
        <title>Jumping Between States</title>
        <p>
            Like any function,
            <b>$state</b> is allowed to have zero, one or multiple parameters.
        </p>
        <p>
            Jump to another state by <b>$push_state</b> is similar to calling a function.
            When that state finishes,
            the state machine continues from code after <b>$push_state</b>.
        </p>
        <p>
            Jump to another state by <b>$goto_state</b> is similar to <b>goto</b>.
            When that state finishes,
            the state machine doesn't continue from code after <b>$goto_state</b>.
            If there is no stacked <b>$push_state</b>, the state machine stops.
        </p>
        <p>
            <program><code><![CDATA[
                module sampleModule;

                using system::*;

                class MySM : StateMachine
                {
                    var result: int = 0;
                    event ResultChanged();

                    func GetResult(): int
                    {
                        return result;
                    }

                    prop Result: int {GetResult : ResultChanged}

                    $state_machine
                    {
                        $state_input Add(number: int);
                        $state_input Sum();

                        $state ResultGenerated(number: int)
                        {
                            result = number;
                            ResultChanged();
                        }

                        $state NumberExpected()
                        {
                            var sum = 0;
                            while (true)
                            {
                                $switch(raise)
                                {
                                case Add(number):
                                    {
                                        sum = sum + number;
                                    }
                                case Sum():
                                    {
                                        $push_state ResultGenerated(sum);
                                        break;
                                    }
                                }
                            }
                            $goto_state NumberExpected();
                        }

                        $state default()
                        {
                            $goto_state NumberExpected();
                        }
                    }
                }

                func main(): string
                {
                    var r = {""};
                    var sm = new MySM^();
                    attach(sm.ResultChanged, func():void
                    {
                        r[0] = $"$(r[0])$(sm.Result); ";
                    });

                    sm.Add(1); sm.Add(2); sm.Add(3); sm.Add(4); sm.Add(5); sm.Add(6); sm.Sum();
                    sm.Add(1); sm.Add(1); sm.Add(2); sm.Add(3); sm.Add(5); sm.Add(8); sm.Sum();
                    sm.Add(1); sm.Add(2); sm.Add(4); sm.Add(8); sm.Add(16); sm.Add(32); sm.Sum();
                    return r[0];
                }
            ]]></code></program>
            The <b>main</b> function returns <b>"21; 20; 63; "</b>.
        </p>
        <p>
            This state machine accumulate numbers by <b>Add</b> and output sum of them by <b>sum</b>.
        </p>
        <p>
            When <b>Sum</b> is called,
            <b>$push_state ResultGenerated(sum);</b> is executed.
            When <b>$state ResultGenerated</b> finishes,
            the state machine continue from the last <b>$push_state</b>,
            which is <b>break;</b>.
        </p>
        <p>
            And then <b>$goto_state NumberExpected();</b> is executed.
            This is a <b>$goto_state</b>,
            so it jumps to the state instead of calling it.
        </p>
        <p>
            Using <b>$jump_state NumberExpected();</b> for making a loop results in memory leaks,
            because variables and resuming point for previous states are saved,
            but the state never finishes.
        </p>
        <p>
            This is an infinite state machine,
            <b>$default</b> never ends.
        </p>
    </topic>
</article>