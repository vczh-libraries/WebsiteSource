<article index="true">
    <topic>
        <title>Observe events explicitly</title>
        <p>
            Sometimes an expression may not have proper observable properties.
            In this case,
            you can explicitly specify which events are needed in order to track an expression.
            Here comes the <b>observe</b> expression.
        </p>
        <p>
            An <b>observe</b> expression must be in a <b>bind</b> expression.
        </p>
        <topic>
            <title>O.observe</title>
            <p>
                <b>O.observe(Prop on EventA, EventB, ...)</b> means
                <b>O.observe as o(o.Prop on o.EventA, o.EventB ...)</b>.
            </p>
        </topic>
        <topic>
            <title>O.observe as o</title>
            <p>
                For <b>O.observe as o(EXPR on E1, E2, ...)</b>:
                <ul>
                    <li><b>O</b> could be any expression.</li>
                    <li><b>o</b> is an expression alias of <b>O</b>.</li>
                    <li><b>EXPR</b> is the expression being tracked, you can use <b>o</b> in <b>EXPR</b>.</li>
                    <li><b>E1</b>, <b>E2</b> ... can be any expression that are referencing events.</li>
                    <li>There must be at least one event after <b>on</b>.</li>
                    <li>Involved events in <b>EXPR</b> are all ignored, only <b>E1</b>, <b>E2</b> ... will be subscribed.</li>
                </ul>
            </p>
            <p>
                <program><code><![CDATA[
                    module sampleModule;

                    class Numbers
                    {
                        prop A: int = 0 {}
                        prop B: int = 0 {}

                        func GetC(): int
                        {
                            return A + B;
                        }

                        prop C: int {GetC}
                    }

                    func main(): string
                    {
                        var numbers = new Numbers^();
                        var sub = bind(numbers.observe as x(x.C on x.AChanged, x.BChanged));

                        var r = {""};
                        attach(sub.ValueChanged, func(newValue: object): void
                        {
                            r[0] = $"$(r[0])$(cast int newValue); ";
                        });
                        sub.Open();

                        numbers.A = 1;
                        numbers.B = 2;
                        numbers.A = 3;
                        numbers.B = 4;

                        sub.Close();
                        return r[0];
                    }
                ]]></code></program>
                The <b>main</b> function returns <b>"1; 3; 5; 7; "</b>.
            </p>
            <p>
                In this example,
                we want to observe <b>numbers.C</b>.
                Unfortunately this property is not associated with an event.
                But we know that,
                either <b>AChanged</b> or <b>BChanged</b> happens means <b>C</b> is changed.
                So we use the <b>observe</b> expression to specify it.
            </p>
        </topic>
        <topic>
            <title>Cached objects</title>
        </topic>
    </topic>
</article>