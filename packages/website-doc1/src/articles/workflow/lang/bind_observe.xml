<article index="true">
    <topic>
        <title>Observe events explicitly</title>
        <p>
            Sometimes an expression may not have proper observable properties.
            In this case,
            you can explicitly specify which events are needed in order to track an expression.
            Here comes the <b>observe</b> expression.
        </p>
        <p>
            An <b>observe</b> expression must be in a <b>bind</b> expression.
            A <b>bind</b> expression must not be in an <b>observe</b> expression.
        </p>
        <topic>
            <title>O.observe</title>
            <p>
                <b>O.observe(Prop)</b> means
                <b>O.observe as o(o.Prop on o.PropChanged)</b>.
            </p>
            <p>
                <b>O.observe(Prop on EventA, EventB, ...)</b> means
                <b>O.observe as o(o.Prop on o.EventA, o.EventB ...)</b>.
            </p>
        </topic>
        <topic>
            <title>O.observe as o</title>
            <p>
                For <b>O.observe as o(EXPR on E1, E2, ...)</b>:
                <ul>
                    <li><b>O</b> could be any expression.</li>
                    <li><b>o</b> is an expression alias of <b>O</b>.</li>
                    <li><b>EXPR</b> is the expression being tracked, you can use <b>o</b> in <b>EXPR</b>.</li>
                    <li><b>E1</b>, <b>E2</b> ... can be any expression that are referencing events.</li>
                    <li>There must be at least one event after <b>on</b>.</li>
                    <li>Involved events in <b>EXPR</b> are all ignored, only <b>E1</b>, <b>E2</b> ... will be subscribed.</li>
                </ul>
            </p>
            <p>
                <program><code><![CDATA[
                    module sampleModule;

                    class Numbers
                    {
                        prop A: int = 0 {}
                        prop B: int = 0 {}

                        func GetC(): int
                        {
                            return A + B;
                        }

                        prop C: int {GetC}
                    }

                    func main(): string
                    {
                        var numbers = new Numbers^();
                        var sub = bind(numbers.observe as x(x.C on x.AChanged, x.BChanged));

                        var r = {""};
                        attach(sub.ValueChanged, func(newValue: object): void
                        {
                            r[0] = $"$(r[0])$(cast int newValue); ";
                        });
                        sub.Open();

                        numbers.A = 1;
                        numbers.B = 2;
                        numbers.A = 3;
                        numbers.B = 4;

                        sub.Close();
                        return r[0];
                    }
                ]]></code></program>
                The <b>main</b> function returns <b>"1; 3; 5; 7; "</b>.
            </p>
            <p>
                In this example,
                we want to observe <b>numbers.C</b>.
                Unfortunately this property is not associated with an event.
                But we know that,
                either <b>AChanged</b> or <b>BChanged</b> happens means <b>C</b> is changed.
                So we use the <b>observe</b> expression to specify it.
            </p>
        </topic>
        <topic>
            <title>Nested observe expressions</title>
            <p>
                For any <b>O.observe as o(EXPR on ...)</b> expression,
                since <b>EXPR</b> could be any expression except <b>bind</b>,
                <b>EXPR</b> could contain another <b>observe</b> expression.
                <program><code><![CDATA[
                    module sampleModule;

                    class Numbers
                    {
                        prop A: int = 0 {}
                        prop B: int = 0 {}

                        func GetC(): int
                        {
                            return A + B;
                        }

                        prop C: int {GetC}
                    }

                    func main(): string
                    {
                        var n1 = new Numbers^();
                        var n2 = new Numbers^();
                        var sub = bind(
                            n1.observe as x(
                                x.C + n2.observe as y(
                                    y.C
                                    on y.AChanged, y.BChanged
                                )
                                on x.AChanged, x.BChanged
                            )
                        );

                        var r = {""};
                        attach(sub.ValueChanged, func(newValue: object): void
                        {
                            r[0] = $"$(r[0])$(cast int newValue); ";
                        });
                        sub.Open();

                        n1.A = 1;
                        n1.B = 2;
                        n2.A = 3;
                        n2.B = 4;

                        sub.Close();
                        return r[0];
                    }
                ]]></code></program>
                The <b>main</b> function returns <b>"1; 3; 6; 10 "</b>.
            </p>
            <p>
                This example track the expression <b>n1.C + n2.C</b>.
                But the <b>C</b> property is not observable, so
                <b>n1.observe as x(x.C on x.AChanged, x.BChanged)</b> and
                <b>n2.observe as y(y.C on y.AChanged, y.BChanged)</b> is necessary.
            </p>
            <p>
                In order to express <b>n1.C + n2.C</b>,
                one of the following could be used:
                <ul>
                    <li><b>n1.observe as x(x.C on x.AChanged, x.BChanged) + n2.observe as y(y.C on y.AChanged, y.BChanged)</b></li>
                    <li><b>n1.observe as x(x.C + n2.observe as y(y.C on y.AChanged, y.BChanged) on x.AChanged, x.BChanged)</b></li>
                </ul>
            </p>
            <p>
                In a <b>bind</b> expression,
                the difference between
                <b>O.observe as o(EXPR on ...)</b> and
                <b>let o = O in (EXPR)</b>
                is which events are going to be subscribed.
                Obviously the above two choices are equivalent.
            </p>
        </topic>
        <topic>
            <title>Cached objects</title>
            <p>
                For any <b>O.observe as o(EXPR on E1, E2, ...)</b> expression,
                <b>E1</b>, <b>E2</b> ... are not tracked.
                Changing related properties do not trigger anything,
                and it may cause <b>bind</b> to work improperly.
                <program><code><![CDATA[
                    module sampleModule;

                    class Pair
                    {
                        prop A: int = 0 {}
                        prop B: int = 0 {}
                    }

                    class Sum
                    {
                        prop AB: Pair^ = new Pair^() {}

                        func GetC(): int
                        {
                            return AB.A + AB.B;
                        }

                        prop C: int {GetC}
                    }

                    func main(): string
                    {
                        var s = new Sum^();
                        var sub = bind(s.observe as x(x.C on x.AB.AChanged, x.AB.BChanged));

                        var r = {""};
                        attach(sub.ValueChanged, func(newValue: object): void
                        {
                            r[0] = $"$(r[0])$(cast int newValue); ";
                        });
                        sub.Open();

                        s.AB = new Pair^();
                        s.AB.A = 1;
                        s.AB.B = 2;
                        s.AB.A = 3;
                        s.AB.B = 4;

                        sub.Close();
                        return r[0];
                    }
                ]]></code></program>
                The <b>main</b> function returns <b>""</b>.
            </p>
            <p>
                This example tracks <b>s.C</b> by subscribing <b>s.AB.AChanged</b> and <b>s.AB.BChanged</b>.
                After <b>sub.Open()</b> is called,
                <b>s.AB</b> is changed.
            </p>
            <p>
                But this subscription does not track <b>s.AB</b>,
                so it is still waiting for <b>AChanged</b> and <b>BChanged</b> from the old <b>s.AB</b>,
                which cause the callback not being triggered.
            </p>
        </topic>
    </topic>
</article>