<article index="true">
    <topic>
        <title>Handling Unexpected Inputs</title>
        <p>
            Workflow offers built-in strategy for handling unexpected inputs.
            <ul>
                <li><b>$switch(raise)</b> raises an exception on unexpected input and stops the state machine.</li>
                <li><b>$switch()</b> and <b>$switch(return)</b> consume the unexpected input.</li>
                <li><b>$switch(continue)</b> and <b>$switch(continue, return)</b> do not consume the unexpected input.</li>
                <li><b>$switch()</b> and <b>$switch(continue)</b> stop the current <b>$switch</b> and continue.</li>
                <li><b>$switch(return)</b> and <b>$switch(continue, return)</b> stop the current state and continue.</li>
            </ul>
        </p>
        <topic>
            <title>$switch()</title>
            <p>
                <b>$switch()</b>
                <ul>
                    <li>ignores and consumes an unpected input</li>
                    <li>continues to execute code after <b>$switch</b></li>
                </ul>
                <program><code><![CDATA[
                    module sampleModule;

                    using system::*;

                    class MySM : StateMachine
                    {
                        prop Output: string = "" {not observe}

                        func Append(text: string): void
                        {
                            Output = $"$(Output)$(text); ";
                        }

                        $state_machine
                        {
                            $state_input A(name: string);
                            $state_input B(name: string);
                            $state_input C(name: string);

                            $state WaitForName()
                            {
                                $switch ()
                                {
                                case A(name):
                                    {
                                        Append($"A($(name))");
                                    }
                                case B(name):
                                    {
                                        Append($"B($(name))");
                                    }
                                }
                                Append("Finishes WaitForName()");
                            }

                            $state default()
                            {
                                $push_state WaitForName();
                                Append("Finishes default()");
                            }
                        }
                    }

                    func main(): string
                    {
                        var sm = new MySM^();
                        try
                        {
                            sm.C("John");
                        }
                        catch (ex)
                        {
                            sm.Append(ex.Message);
                        }
                        return sm.Output;
                    }
                ]]></code></program>
                The <b>main</b> function returns <b>"Finishes WaitForName(); Finishes default(); "</b>.
            </p>
            <p>
                When <b>C("John")</b> is called,
                <b>$switch</b> found that this is an unexpected input,
                it continues to run code after <b>$switch</b>.
            </p>
        </topic>
        <topic>
            <title>$switch(raise)</title>
            <p>
                <b>$switch()</b>
                <ul>
                    <li>throws an exception when an unpected input happens</li>
                    <li>stops the state machine</li>
                </ul>
                <program><code><![CDATA[
                    module sampleModule;

                    using system::*;

                    class MySM : StateMachine
                    {
                        prop Output: string = "" {not observe}

                        func Append(text: string): void
                        {
                            Output = $"$(Output)$(text); ";
                        }

                        $state_machine
                        {
                            $state_input A(name: string);
                            $state_input B(name: string);
                            $state_input C(name: string);

                            $state WaitForName()
                            {
                                $switch (raise)
                                {
                                case A(name):
                                    {
                                        Append($"A($(name))");
                                    }
                                case B(name):
                                    {
                                        Append($"B($(name))");
                                    }
                                }
                                Append("Finishes WaitForName()");
                            }

                            $state default()
                            {
                                $push_state WaitForName();
                                Append("Finishes default()");
                            }
                        }
                    }

                    func main(): string
                    {
                        var sm = new MySM^();
                        try
                        {
                            sm.C("John");
                        }
                        catch (ex)
                        {
                            sm.Append(ex.Message);
                        }
                        try
                        {
                            sm.A("John");
                        }
                        catch (ex)
                        {
                            sm.Append(ex.Message);
                        }
                        return sm.Output;
                    }
                ]]></code></program>
                The <b>main</b> function returns <b>"Method "C" of class "MySM" cannot be called at this moment.; The state machine has been stopped.; "</b>.
            </p>
            <p>
                When <b>C("John")</b> is called,
                <b>$switch</b> found that this is an unexpected input,
                it throws an exception,
                and the state machine is stopped.
            </p>
        </topic>
        <topic>
            <title>$switch(return)</title>
            <p>
                <b>$switch()</b>
                <ul>
                    <li>consumes an unpected input</li>
                    <li>stops the current state</li>
                    <li>continues to execute code after this state</li>
                </ul>
                <program><code><![CDATA[
                    module sampleModule;

                    using system::*;

                    class MySM : StateMachine
                    {
                        prop Output: string = "" {not observe}

                        func Append(text: string): void
                        {
                            Output = $"$(Output)$(text); ";
                        }

                        $state_machine
                        {
                            $state_input A(name: string);
                            $state_input B(name: string);
                            $state_input C(name: string);

                            $state WaitForName()
                            {
                                $switch (return)
                                {
                                case A(name):
                                    {
                                        Append($"A($(name))");
                                    }
                                case B(name):
                                    {
                                        Append($"B($(name))");
                                    }
                                }
                                Append("Finishes WaitForName()");
                            }

                            $state default()
                            {
                                $push_state WaitForName();
                                Append("Finishes default()");
                            }
                        }
                    }

                    func main(): string
                    {
                        var sm = new MySM^();
                        try
                        {
                            sm.C("John");
                        }
                        catch (ex)
                        {
                            sm.Append(ex.Message);
                        }
                        return sm.Output;
                    }
                ]]></code></program>
                The <b>main</b> function returns <b>"Finishes default(); "</b>.
            </p>
            <p>
                When <b>C("John")</b> is called,
                <b>$switch</b> found that this is an unexpected input,
                it stops <b>$state WaitForName()</b> and continues in <b>$state default()</b>.
            </p>
        </topic>
        <topic>
            <title>$switch(continue)</title>
            <p>
                <b>$switch(continue)</b>
                <ul>
                    <li>consumes an unpected input</li>
                    <li>continues to execute code after <b>$switch</b></li>
                    <li>the unpected input is not consumes, it is left for the next <b>$switch</b></li>
                </ul>
                <program><code><![CDATA[
                    module sampleModule;

                    using system::*;

                    class MySM : StateMachine
                    {
                        prop Output: string = "" {not observe}

                        func Append(text: string): void
                        {
                            Output = $"$(Output)$(text); ";
                        }

                        $state_machine
                        {
                            $state_input A(name: string);
                            $state_input B(name: string);
                            $state_input C(name: string);

                            $state WaitForName()
                            {
                                $switch (continue)
                                {
                                case A(name):
                                    {
                                        Append($"1st A($(name))");
                                    }
                                case B(name):
                                    {
                                        Append($"1st($(name))");
                                    }
                                }
                                $switch (raise)
                                {
                                case A(name):
                                    {
                                        Append($"2nd A($(name))");
                                    }
                                case B(name):
                                    {
                                        Append($"2nd B($(name))");
                                    }
                                case C(name):
                                    {
                                        Append($"2nd C($(name))");
                                    }
                                }
                                Append("Finishes WaitForName()");
                            }

                            $state default()
                            {
                                $push_state WaitForName();
                                $switch (raise)
                                {
                                case A(name):
                                    {
                                        Append($"3rd A($(name))");
                                    }
                                case B(name):
                                    {
                                        Append($"3rd B($(name))");
                                    }
                                case C(name):
                                    {
                                        Append($"3rd C($(name))");
                                    }
                                }
                                Append("Finishes default()");
                            }
                        }
                    }

                    func main(): string
                    {
                        var sm = new MySM^();
                        try
                        {
                            sm.C("John");
                            sm.C("John");
                        }
                        catch (ex)
                        {
                            sm.Append(ex.Message);
                        }
                        return sm.Output;
                    }
                ]]></code></program>
                The <b>main</b> function returns <b>"2nd C(John); Finishes WaitForName(); 3rd C(John); Finishes default(); "</b>.
            </p>
            <p>
                When <b>C("John")</b> is called,
                the first <b>$switch</b> found that this is an unexpected input,
                it continues to run code after <b>$switch</b>.
            </p>
            <p>
                And then the second <b>$switch</b> is executed,
                it found that <b>C("John")</b> is an expected input at this moment,
                and consumes it.
            </p>
        </topic>
        <topic>
            <title>$switch(continue, return)</title>
            <p>
                <b>$switch(continue)</b>
                <ul>
                    <li>consumes an unpected input</li>
                    <li>stops the current state</li>
                    <li>continues to execute code after this state</li>
                    <li>the unpected input is not consumes, it is left for the next <b>$switch</b></li>
                </ul>
                <program><code><![CDATA[
                    module sampleModule;

                    using system::*;

                    class MySM : StateMachine
                    {
                        prop Output: string = "" {not observe}

                        func Append(text: string): void
                        {
                            Output = $"$(Output)$(text); ";
                        }

                        $state_machine
                        {
                            $state_input A(name: string);
                            $state_input B(name: string);
                            $state_input C(name: string);

                            $state WaitForName()
                            {
                                $switch (continue, return)
                                {
                                case A(name):
                                    {
                                        Append($"1st A($(name))");
                                    }
                                case B(name):
                                    {
                                        Append($"1st($(name))");
                                    }
                                }
                                $switch (raise)
                                {
                                case A(name):
                                    {
                                        Append($"2nd A($(name))");
                                    }
                                case B(name):
                                    {
                                        Append($"2nd B($(name))");
                                    }
                                case C(name):
                                    {
                                        Append($"2nd C($(name))");
                                    }
                                }
                                Append("Finishes WaitForName()");
                            }

                            $state default()
                            {
                                $push_state WaitForName();
                                $switch (raise)
                                {
                                case A(name):
                                    {
                                        Append($"3rd A($(name))");
                                    }
                                case B(name):
                                    {
                                        Append($"3rd B($(name))");
                                    }
                                case C(name):
                                    {
                                        Append($"3rd C($(name))");
                                    }
                                }
                                Append("Finishes default()");
                            }
                        }
                    }

                    func main(): string
                    {
                        var sm = new MySM^();
                        try
                        {
                            sm.C("John");
                            sm.C("John");
                        }
                        catch (ex)
                        {
                            sm.Append(ex.Message);
                        }
                        return sm.Output;
                    }
                ]]></code></program>
                The <b>main</b> function returns <b>"3rd C(John); Finishes default(); The state machine has been stopped.; "</b>.
            </p>
            <p>
                When <b>C("John")</b> is called,
                the first <b>$switch</b> found that this is an unexpected input,
                it stops <b>$state WaitForName()</b> and continues in <b>$state default()</b>.
            </p>
            <p>
                The second <b>$switch</b> is skipped.
            </p>
            <p>
                And then the third <b>$switch</b> is executed,
                it found that <b>C("John")</b> is an expected input at this moment,
                and consumes it.
            </p>
            <p>
                When <b>C("John")</b> is called for the second time,
                the state machine has stopped,
                it throws an exception.
            </p>
        </topic>
    </topic>
</article>