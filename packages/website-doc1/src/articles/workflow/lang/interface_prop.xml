<article index="true">
    <topic>
        <title>Properties and Events (interface)</title>
        <p>
            Properties and events are allowed in interfaces.
        </p>
        <topic>
            <title>Defining properties and events</title>
            <p>
                When property <b>Name</b> is associated with event <b>NameChanged</b>,
                magic doesn't happen automatically,
                the implementation of <b>SetName</b> should trigger <b>NameChanged</b> approppriately.
            </p>
            <p>
                The property could also be readonly, or not associated with an event.
            </p>
            <topic>
                <title>Full-featured property</title>
                <p>
                    <program><code><![CDATA[
                        interface IWithProp
                        {
                            prop Name: string {}
                        }
                    ]]></code></program>
                    which means:
                    <program><code><![CDATA[
                        interface IWithProp
                        {
                            event NameChanged();
                            func GetName(): string;
                            func SetName(value: string): void;
                            prop Name: string {GetName, SetName : NameChanged}
                        }
                    ]]></code></program>
                </p>
            </topic>
            <topic>
                <title>Readonly property</title>
                <p>
                    <program><code><![CDATA[
                        interface IWithProp
                        {
                            prop Name: string {const}
                        }
                    ]]></code></program>
                    which means:
                    <program><code><![CDATA[
                        interface IWithProp
                        {
                            event NameChanged();
                            func GetName(): string;
                            prop Name: string {GetName : NameChanged}
                        }
                    ]]></code></program>
                </p>
            </topic>
            <topic>
                <title>Without event</title>
                <p>
                    <program><code><![CDATA[
                        interface IWithProp
                        {
                            prop Name: string {not observe}
                        }
                    ]]></code></program>
                    which means:
                    <program><code><![CDATA[
                        interface IWithProp
                        {
                            func GetName(): string;
                            func SetName(value: string): void;
                            prop Name: string {GetName, SetName}
                        }
                    ]]></code></program>
                </p>
            </topic>
            <topic>
                <title>Readonly property without event</title>
                <p>
                    <program><code><![CDATA[
                        interface IWithProp
                        {
                            prop Name: string {const, not observe}
                        }
                    ]]></code></program>
                    which means:
                    <program><code><![CDATA[
                        interface IWithProp
                        {
                            func GetName(): string;
                            prop Name: string {GetName}
                        }
                    ]]></code></program>
                </p>
            </topic>
        </topic>
        <topic>
            <title>Implementing properties</title>
            <p>
                Auto-properties are also allowed in new interface expressions
                to create default implementation for properties:
                <program><code><![CDATA[
                    var withProp = new IWithProp^
                    {
                        override prop Name: string = "an-initialized-value" {}
                    };
                ]]></code></program>
                <ul>
                    <li>The <b>override</b> keyword is required.</li>
                    <li>Auto-properties in new interface expressions must be initialized.</li>
                    <li>It doesn't matter whether the property in the interface is auto-property or not.</li>
                </ul>
                It is almost equivalent to:
                <program><code><![CDATA[
                    var withProp = new IWithProp^
                    {
                        var name: string = "an-initialized-value";

                        override func GetName(): string
                        {
                            return name;
                        }

                        override func SetName(value: string): void
                        {
                            if (name != value)
                            {
                                name = value;
                                NameChanged();
                            }
                        }
                    };
                ]]></code></program>
                but the <b>name</b> variable is not accessible.
            </p>
            <p>
                You don't need to <b>override</b> an event in an interface.
            </p>
            <p>
                When an auto-property is used in an new interface expression,
                the configuration of <b>const</b> and <b>not observe</b> must be exactly the same
                to the property that is overrided in the interface,
                semantically (because it could be declared using a normal property, not using an auto-property).
            </p>
            <p>
                Even if you use <b>const</b> for an auto-property in an new interface expression,
                the <b>SetName</b> function is always there.
                In this case,
                the only way to change the value of the property is to call <b>SetName</b>.
            </p>
        </topic>
        <topic>
            <title>Using events</title>
            <p>
                Events don't have to be associated with properties.
                You can define events in interfaces and trigger them in new interface expressions.
            </p>
            <p>
                Events are allowed to have arguments,
                but just like a function type,
                arguments do not have names.
            </p>
            <p>
                <program><code><![CDATA[
                    module sampleModule;

                    interface IWithEvent
                    {
                        event SomethingHappened(string);
                        func MakeItHappen(something: string): void;
                    }

                    func main(): string
                    {
                        var withEvent = new IWithEvent^
                        {
                            override func MakeItHappen(something: string): void
                            {
                                SomethingHappened(something);
                            }
                        };

                        var r = {""};
                        var handler = attach(
                            withEvent.SomethingHappened,
                            func (something:string): void
                            {
                                r[0] = r[0] & $"$(something); ";
                            }
                        );

                        withEvent.MakeItHappen("Good");
                        withEvent.MakeItHappen("Cool");
                        withEvent.SomethingHappened("Wonderful");

                        detach(withEvent.SomethingHappened, handler);
                        return r[0];
                    }
                ]]></code></program>
                <ul>
                    <li>Triggering an event is like calling a function.</li>
                    <li>Events can be triggered anywhere, not just in the new interface expression.</li>
                    <li>The only way to access an event is to trigger it, you are not allowed to copy the event object.</li>
                    <li><b>attach</b> is used to subscribe an event with a value of a function type that is compatible with the event (exactly same argument types and returning <b>void</b>).</li>
                    <li>The result from <b>attach</b> is used to unsubscribe an event in <b>detach</b>.</li>
                </ul>
            </p>
            <p>
                <b>IMPORTANT</b>:
                Variables are captured by value in ordered lambda expressions, lambda expressions and new interface expressions.
                This is the reason why we define <b>r</b> as <b>string []</b>.
                Because <b>r</b> is not allowed to be changed in the event callback,
                but we can change elements in <b>r</b>.
            </p>
            <p>
                Function <b>main</b> returns <b>"Good; Cool; Wonderful; "</b>.
            </p>
        </topic>
    </topic>
</article>