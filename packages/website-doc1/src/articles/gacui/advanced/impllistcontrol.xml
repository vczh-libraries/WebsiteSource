<article index="true">
    <topic>
        <title>Creating New List Controls</title>
        <p>
            Customizing <b>GuiTextList</b> or <b>GuiBindableTextList</b> by providing new item templates ,
            should be the most common way to create a new list control experience.
            But you could still create your new list control.
        </p>
        <p>
            In GacUI 1.0,
            any new classes created completely by C++
            (instead of by <b>&lt;Instance/&gt;</b> in GacUI XML Resource)
            is not accessible in the GacUI XML Resource,
            because the compiler doesn't know about that.
        </p>
        <p>
            Any new list control is expected to derives from <b>GuiSelectableListControl</b> directly.
            If list items are not selectable,
            then <b>GuiListControl</b> could be used to reduce runtime overhead.
        </p>
        <topic>
            <title>GuiListControl::IItemProvider, the constructor argument</title>
            <p>
                An instance of <b>IItemProvider</b> is required in the constructor of
                <b>GuiListControl</b> and <b>GuiSelectableListControl</b>.
                The base class doesn't control the life cycle of this instance,
                it should be properly disposed in the derived class.
            </p>
            <p>
                This interface offers a bridge so that <b>GuiListControl</b> could access its items.
                <ul>
                    <li>
                        <b>AttachCallback</b>:
                        Multiple <b>IItemProviderCallback</b> could be installed to an <b>IItemProvider</b>.
                        When a callback is properly installed,
                        its <b>OnAttached(this)</b> must be called immediately.
                    </li>
                    <li>
                        <b>DetachCallback</b>:
                        This method is called to remove an installed <b>IItemProviderCallback</b>.
                        When a callback is properly uninstalled,
                        its <b>OnAttached(nullptr)</b> must be called immediately.
                    </li>
                    <li>
                        <b>PushEditing</b>:
                        This method is called when the list control enters another level of editing mode.
                    </li>
                    <li>
                        <b>PopEditing</b>:
                        This method is called when the list control leaves one level of editing mode.
                    </li>
                    <li>
                        <b>IsEditing</b>:
                        This method should return <b>true</b> if at least one level of editing mode is still in the list control.
                    </li>
                    <li>
                        <b>Count</b>:
                        This method should return the total number of items in the list control.
                        In <b>GuiTreeView</b>,
                        all collapsed items are not counted.
                        Although they exist in the logical tree,
                        but if a node is collapsed,
                        all sub items will be treated as removed by calling <b>IItemProviderCallback::OnItemModified</b>.
                        And when a node is expanded,
                        all sub items come back in the same way.
                    </li>
                    <li>
                        <b>GetTextValue</b>:
                        This method should return a text representation for a given item.
                        The value will be copied to the <b>Text</b> property of a item template.
                    </li>
                    <li>
                        <b>GetBindingValue</b>:
                        This method should return a <b>non-null</b> object for a given item,
                        if data binding for item source is available in this control.
                        For non-bindable list controls,
                        a <b>null</b> object should be returned by calling the constructor of the return value with no argument,
                        for example, <b>{}</b> in C++.
                    </li>
                    <li>
                        <b>RequestView</b>:
                        This method provides a way to decouple between the list control and the details of items.
                        <b>IItemProvider</b> should handle the life cycle of all returned views.
                    </li>
                </ul>
            </p>
            <p>
                <b>list::ItemProviderBase</b> could be used to create an <b>IItemProvider</b>.
                The following methods are implemented in this class:
                <ul>
                    <li><b>AttachCallback</b></li>
                    <li><b>DetachCallback</b></li>
                    <li><b>PushEditing</b></li>
                    <li><b>PopEditing</b></li>
                    <li><b>IsEditing</b></li>
                </ul>
                You need to implement the rest to complete an <b>IItemProvider</b>.
                The <b>InvokeOnItemModified</b> method is provider to call <b>OnItemModified</b> in all installed callbacks.
            </p>
        </topic>
        <topic>
            <title>GuiListControl::IItemProviderCallback, the constructor argument</title>
            <p>
                The <b>OnItemModified</b> allow <b>IItemProvider</b> to report
                one change of consecutive items:
                <ul>
                    <li><b>start</b>: The index of the first item in all changing consecutive items.</li>
                    <li><b>count</b>: The numbers of all changing consecutive items.</li>
                    <li><b>newCount</b>: The numbers of new items that all changing consecutive items change into.</li>
                </ul>
            </p>
            <p>
                If changes happens in multiple groups of consecutive items,
                each group should be reported in separate call to <b>OnItemModified</b>.
                You must try your best to ensure that,
                <b>IItemProvider::Count</b>,
                <b>IItemProvider::GetTextValue</b>,
                <b>IItemProvider::GetBindingValue</b>
                and all related methods in views from <b>RequestView</b>
                should not see any unreported changes.
            </p>
            <p>
                Call <b>OnItemModified(start, 0, count)</b>
                when a group of items are inserted to the position <b>start</b>.
                If one item is inserted,
                <b>count</b> should be <b>1</b>.
            </p>
            <p>
                Call <b>OnItemModified(start, count, 0)</b>
                when a group of items are removed from the position <b>start</b>.
                If one item is removed,
                <b>count</b> should be <b>1</b>.
            </p>
            <p>
                Call <b>OnItemModified(start, count, count)</b>
                when a group of items are updated beginning from the position <b>start</b>.
                If one item is updated,
                <b>count</b> should be <b>1</b>.
                An item is updated,
                if the item is replaced,
                or any interested content inside this item is updated.
            </p>
        </topic>
        <topic>
            <title>GuiListControl::IItemArranger, the item layouting</title>
            <p>
                <b>IItemArranger</b> handles rendering of list items.
                An <b>IItemArranger</b> is attached to a list control
                using its <b>Arranger</b> property
                or its protected method <b>SetStyleAndArranger</b>.
            </p>
            <p>
                There are already some
                <a href="/gacui/components/controls/list/guilistcontrol.html#Arranger-ArrangerChanged-">
                    built-in IItemArranger implementations
                </a>.
                Check them out to see if any of the works,
                so you don't have to implement this interface.
                It is pretty difficult.
            </p>
            <p>
                <b>IItemProviderCallback</b> is also the base class of <b>IItemArranger</b>.
                When an <b>IItemArranger</b> is attached to a list control,
                it will be installed as a callback to <b>IItemProvider</b>.
                So that <b>IItemArranger</b> could update the rendering when any item is changed.
            </p>
            <p>
                A <b>IItemArranger</b> should be aware of the
                <a href="/gacui/components/controls/list/guilistcontrol.html#DisplayItemBackground">
                    DisplayItemBackground
                </a>
                property of a list control.
                If this property returns <b>true</b>,
                all item template instances returned from <b>IItemArrangerCallback::ReleaseItem</b>
                should be contained in a <b>GuiSelectableButton</b> as the item background using
                <ul>
                    <li>The <b>ThemeNameLLListItemBackground</b> as the theme of this button.</li>
                    <li><b>listControl->TypedControlTemplateObject(true)->GetBackgroundTemplate()</b> as the control template of this button.</li>
                </ul>
            </p>
            <p>
                All locations, sizes and margins involved in this interface are all <b>virtual</b>.
                <b>IItemArranger</b> just need to provide item layout in the <b>LeftDown</b> direction.
                The 
                <a href="/gacui/components/controls/list/guilistcontrol.html#Axis-AxisChanged-">
                    <b>Axis</b>
                </a>
                property will be used by the list control
                to adjust locations and sizes of all visible items to layout them in the expected direction.
            </p>
            <p>
                Here are all methods to implemement:
                <ul>
                    <li>
                        <p>
                            <b>AttachListControl</b>:
                            This method is called when it is attached to a list control.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>DetachListControl</b>:
                            This method is called when it is detached from a list control.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>GetCallback</b>:
                            Get the argument from the last <b>SetCallback</b> call.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>SetCallback</b>:
                            This method is called when it is attached to a list control.
                            Only one callback will be installed to <b>IItemArranger</b>.
                            This callback provides everything that an <b>IItemArranger</b> could do the a list control.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>GetTotalSize</b>:
                            Return the total size of all items in their layout.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>GetVisibleStyle</b>:
                            This method should return the item template instance for a give item.
                            If the item is invisible because it is scrolled out of the visible area of the list control,
                            it should return <b>nullptr</b>.
                        </p>
                        <p>
                            Living item template instances for items could be managed using
                            <b>IItemArrangerCallback::RequestItem</b> and <b>IItemArrangerCallback::ReleaseItem</b>.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>GetVisibleIndex</b>:
                            This method should return the item index for a given item template instance.
                            If such an instance is unknown to this <b>IItemArranger</b>,
                            it should return <b>-1</b>.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>ReloadVisibleStyles</b>:
                            Recreate all UI objects for visible items.
                            Items don't need to be recreated immediately,
                            but all UI objects for items should be disposed in the call to this method.
                        </p>
                        <p>
                            <b>GetVisibleStyle</b> and <b>GetVisibleIndex</b> could pretend that all items are invisible
                            until the next call to <b>OnViewChanged</b>.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>OnViewChanged</b>:
                            This method is called to tell the <b>IItemArranger</b>
                            what is the visible part in <b>GetTotalSize</b>.
                        </p>
                        <p>
                            <b>IItemArranger</b> could only create UI objects for items in this area,
                            to reduce the memory pressure and improve the performance.
                            <b>IItemArranger</b> could also create UI objects for all items if performance is not important.
                            All items with their UI objects created are <b>visible items</b>.
                        </p>
                        <p>
                            Living item template instances for items could be managed using
                            <b>IItemArrangerCallback::RequestItem</b> and <b>IItemArrangerCallback::ReleaseItem</b>.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>FindItem</b>:
                            Search a next item from the specified item <b>itemIndex</b> using a keyboard operation <b>key</b>.
                            <b>-1</b> could be returned if no reasonable item is definded as <b>the next item</b>.
                        </p>
                    </li>
                    <li>
                        <b>EnsureItemVisible</b>:
                        This method is called if the list control want to scroll to an area to make a given item visible.
                        <b>IItemArrangerCallback::SetViewLocation</b> is usually called as a respond.
                        <b>OnViewChanged</b> could be called in <b>SetViewLocation</b>.
                    </li>
                    <li>
                        <b>GetAdoptedSize</b>:
                        Return a reasonable size for the visible area of items,
                        if the list control is used as a combo box dropdown list.
                    </li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>GuiListControl::IItemArrangerCallback, the item layouting</title>
            <p>
                All locations, sizes and margins involved in this interface are all <b>virtual</b>.
                <b>IItemArranger</b> just need to provide item layout in the <b>LeftDown</b> direction.
                The 
                <a href="/gacui/components/controls/list/guilistcontrol.html#Axis-AxisChanged-">
                    <b>Axis</b>
                </a>
                property will be used by the list control
                to adjust locations and sizes of all visible items to layout them in the expected direction.
            </p>
            <p>
                <ul>
                    <li>
                        <b>RequestItem</b>:
                        Ask the list control to create an item template instance for a specific item.
                        An item template instance that is released by calling <b>ReleaseItem</b>
                        could be reused for a different item.
                    </li>
                    <li>
                        <b>ReleaseItem</b>:
                        Ask the list control to dispose an item template instance for a specific item.
                        The item template instance will be deleted from the memory later if necessary,
                        the pointer should not be used anymore after calling this method.
                    </li>
                    <li>
                        <b>SetViewLocation</b>:
                        Tell the list control what should be the left-top corner of the visible area.
                        But the list control could move the visible area to a different location closed by
                        if it thinks this is better.
                    </li>
                    <li>
                        <b>GetStylePreferredSize</b>:
                        Read the size of the <b>PreferredBounds</b> property of a compositon contained by list control.
                        <b>IMPORTANT</b>: the result is <b>virtual</b>.
                        Do not use this property directly,
                        use this method instead.
                    </li>
                    <li>
                        <b>SetStyleAlignmentToParent</b>:
                        Update the <b>AlignmentToParent</b> property of a composition contained by list control.
                        <b>IMPORTANT</b>: the result is <b>virtual</b>.
                        Do not use this property directly,
                        use this method instead.
                    </li>
                    <li>
                        <b>GetStyleBounds</b>:
                        Read the <b>Bounds</b> property of a composition contained by list control.
                        <b>IMPORTANT</b>: the result is <b>virtual</b>.
                        Do not use this property directly,
                        use this method instead.
                    </li>
                    <li>
                        <b>SetStyleBounds</b>:
                        Update the <b>Bounds</b> property of a composition contained by list control.
                        <b>IMPORTANT</b>: the result is <b>virtual</b>.
                        Do not use this property directly,
                        use this method instead.
                    </li>
                    <li>
                        <b>GetContainerComposition</b>:
                        Get the composition as a container to store all UI objects for items.
                    </li>
                    <li>
                        <b>OnTotalSizeChanged</b>:
                        Call this method to tell the list control that
                        <b>IItemArranger::GetTotalSize</b> has been changed.
                    </li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>Using IItemProvider::RequestView Properly</title>
        </topic>
        <topic>
            <title>Data Binding on Items</title>
        </topic>
    </topic>
</article>