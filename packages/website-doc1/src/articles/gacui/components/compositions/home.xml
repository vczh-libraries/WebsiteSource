<article index="true">
    <topic>
        <title>Compositions</title>
        <p>
            <a href="/gacui/kb/compositions.html">Composition</a> offer layout algorithms based on constraints.
            Usually, developers using GacUI places nested controls and compositions in a window,
            by defining constraints between compositions,
            the window knows its minimum size,
            and how to change sizes of child controls when the window is resizing.
        </p>
        <p>
            There are a lot of predefined compositions as follows,
            each defines a kind of constraint:
            <ul>
                <li>
                    GuiGraphicsComposition
                    <ul>
                        <li>
                            GuiGraphicsSite
                            <ul>
                                <li>GuiWindowComposition</li>
                                <li>
                                    &lt;Bounds&gt;
                                    <ul>
                                        <li>
                                            &lt;Stack&gt;
                                            <ul>
                                                <li>&lt;RepeatStack&gt;</li>
                                            </ul>
                                        </li>
                                        <li>
                                            &lt;Flow&gt;
                                            <ul>
                                                <li>&lt;RepeatFlow&gt;</li>
                                            </ul>
                                        </li>
                                        <li>&lt;Table&gt;</li>
                                        <li>&lt;SharedSizeRoot&gt;</li>
                                        <li>&lt;SharedSizeItem&gt;</li>
                                        <li>
                                            GuiResponsiveCompositionBase
                                            <ul>
                                                <li>&lt;ResponsiveView&gt;</li>
                                                <li>&lt;ResponsiveFixed&gt;</li>
                                                <li>&lt;ResponsiveStack&gt;</li>
                                                <li>&lt;ResponsiveGroup&gt;</li>
                                            </ul>
                                        </li>
                                        <li>&lt;ResponsiveShared&gt;</li>
                                        <li>&lt;ResponsiveContainer&gt;</li>
                                    </ul>
                                </li>
                                <li>&lt;StackItem&gt;</li>
                                <li>&lt;FlowItem&gt;</li>
                                <li>&lt;Cell&gt;</li>
                                <li>&lt;SideAligned&gt;</li>
                                <li>&lt;PartialView&gt;</li>
                            </ul>
                        </li>
                    </ul>
                </li>
            </ul>
        </p>
        <p>
            Here we introduce common constraints and configuration of all compositions first.
        </p>
        <topic>
            <title>TransparentToMouse property</title>
            <p>
                The default value is <b>false</b>.
            </p>
            <p>
                If it is set to <b>true</b>,
                the return value of <b>FoundComposition</b> method will never be this composition
                when the second argument to this function is <b>true</b>.
                This means a mouse event will not raise from at this composition.
            </p>
            <p>
                When a mouse event is raised on a composition,
                it also raised on all parent compositions from inside to outside one by one.
                In the argument to the mouse event,
                the <b>compositionSource</b> points to the composition where this mouse event raised from,
                and the <b>eventSource</b> points to the composition that receiving the event.
            </p>
            <p>
                Obviously,
                when raising a mouse event from inside to outside,
                the <b>compositionSource</b> property does not change,
                pointing to the most inside composition that raises this event.
            </p>
            <p>
                If <b>TransparentToMouse</b> is set to <b>false</b> for a composition,
                when the mouse clicks this composition but not its child composition,
                it becomes <b>compositionSource</b> and raise all events from this composition
                to the most outside composition (which is usually a <b>GuiWindowComposition</b>).
            </p>
            <p>
                If <b>TransparentToMouse</b> is set to <b>false</b> for a composition,
                when the mouse clicks this composition but not its child composition,
                it will find the a composition from itself to outside one by one.
                When it reaches a composition of which the <b>TransparentToMouse</b> is true,
                this composition becomes <b>compositionSource</b> and everything begins here.
            </p>
        </topic>
        <topic>
            <title>AssociatedCursor property</title>
            <p>
                This property defines how the cursor should look like
                when the cursor is over this composition.
            </p>
            <p>
                If this property is not set,
                it will ask its parent composition for a value.
            </p>
            <p>
                In <b>GacUI XML Resource</b>,
                the type of this property is <b>presentation::INativeCursor::SystemCursorType</b>.
                The value could be any item of this enum.
            </p>
        </topic>
        <topic>
            <title>AssociatedHitTestResult property</title>
            <p>
                The property defines how the window should behave
                when the mouse is interacting with this composition.
            </p>
            <p>
                The type of this property is <b>presentation::INativeWindowListener::HitTestResult</b>.
                The value could be any item of this enum.
            </p>
            <p>
                Usually this property is used when implementing a control template for <b>&lt;Window/&gt;</b>.
                For example,
                the window template will have a close button
                and <b>ButtonClose</b> is set to the <b>AssociatedHitTestResult</b> property of this button's <b>BoundsComposition</b>.
                When the mouse clicks this button,
                the OS will know that this button is for closing the window,
                and then raise a sequence of events and close the window if it is not interrupted.
                No code is needed for the <b>Clicked</b> event of this button.
            </p>
        </topic>
        <topic>
            <title>Visible property</title>
            <p>
                The default value is <b>true</b>.
            </p>
            <p>
                If it is set to <b>false</b>,
                anything inside this composition will not be rendered,
                <b>but they still affect the sizing</b> as they are visible.
            </p>
        </topic>
        <topic>
            <title>OwnedElement and MinSizeLimitation property</title>
        </topic>
        <topic>
            <title>PreferredMinSize property</title>
        </topic>
        <topic>
            <title>Margin property</title>
        </topic>
        <topic>
            <title>InternalMargin property</title>
        </topic>
    </topic>
</article>