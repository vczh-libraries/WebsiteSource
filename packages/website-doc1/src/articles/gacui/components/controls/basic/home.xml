<article index="true">
    <topic>
        <title>Basic Controls</title>
        <p>
            Controls visualize data and react to user input.
            <b>&lt;Window/&gt;</b> is also a control.
        </p>
        <p>
            Use <b>SafeDeleteControl</b> and <b>SafeDeleteComposition</b>
            to delete a control or a composition containing controls.
            Otherwise memory leaks may happen.
        </p>
        <p>
            A control has three main composition properties:
            <ul>
                <li>
                    <b>BoundsComposition</b>:
                    This is a composition of the control's border.
                    To make a control appear inside another composition,
                    just simply adds <b>BoundsComposition</b> as a child composition to that composition.
                </li>
                <li>
                    <b>ContainerComposition</b>:
                    This is a composition of the control's inner border.
                    To make another composition inside a control,
                    just simply adds that composition as a child composition to <b>ContainerComposition</b>.
                </li>
                <li>
                    <b>FocusComposition</b>:
                    If a control is focusable,
                    this property returns a non-null value.
                    <b>FocusComposition</b> receives <a href="/gacui/components/compositions/events.html">most of composition events</a>.
                    Ideally,
                    events provided by the control itself is sufficient enough,
                    <b>FocusComposition</b> is designed for the implementation of the control and the control template.
                </li>
            </ul>
            <b>BoundsComposition</b> and <b>ContainerComposition</b> will not change during a control's life time.
            <b>FocusComposition</b> changes when the control template changes.
        </p>
        <p>
            Many properties are shared across control classes.
        </p>
        <topic>
            <title>States</title>
            <p>
                The following properties and events control states for a control.
            </p>
            <topic>
                <title>VisuallyEnabled (VisuallyEnabledChanged)</title>
                <p>
                    When a control's <b>Enabled</b> is set to <b>false</b>,
                    <b>VisuallyEnalbed</b> of the control itself and all direct or indirect child controls is also set to <b>false</b>.
                </p>
                <p>
                    A visually disabled control doesn't react to user input.
                </p>
                <p>
                    <b>VisuallyEnabled</b> of the control template automatically updates when this property is changed.
                </p>
            </topic>
            <topic>
                <title>Enabled (EnabledChanged)</title>
                <p>
                    The default value for this property is <b>true</b>.
                </p>
                <p>
                    When a control's <b>Enabled</b> is set to <b>false</b>,
                    <b>VisuallyEnalbed</b> of the control itself and all direct or indirect child controls is also set to <b>false</b>.
                </p>
                <p>
                    A visually disabled control doesn't react to user input.
                </p>
            </topic>
            <topic>
                <title>Visible (VisibleChanged)</title>
                <p>
                    The default value for this property is <b>true</b>.
                </p>
                <p>
                    When a control's <b>Visible</b> is set to <b>false</b>,
                    the control disappears,
                    but it still affect the minimum size of all parent compositions.
                </p>
            </topic>
            <topic>
                <title>Text (TextChanged)</title>
                <p>
                    The default value for this property is <b>&quot;&quot;</b>.
                </p>
                <p>
                    This property controls the text displayed on the control.
                </p>
                <p>
                    <b>Text</b> of the control template automatically updates when this property is changed.
                </p>
            </topic>
            <topic>
                <title>DisplayFont (DisplayFontChanged)</title>
                <p>
                    <b>DisplayFont</b> reflects the expected font for this control.
                </p>
                <p>
                    The expected font for this control is,
                    either the <b>Font</b> of this control if it is not empty,
                    or the nearest parent control's non-empty <b>Font</b>.
                    If no font is found all the way to the top level control,
                    it becomes <b>GetCurrentController()-&gt;ResourceService()-&gt;GetDefaultFont()</b>
                </p>
                <p>
                    <b>DisplayFont</b> of the control template automatically updates when this property is changed.
                </p>
            </topic>
            <topic>
                <title>Font (FontChanged)</title>
                <p>
                    The default value for this property is <b>null</b>.
                </p>
                <p>
                    When a control's <b>Font</b> is changed,
                    <b>DisplayFont</b> of the control itself and all direct or indirect child controls with an empty <b>Font</b> is also changed,
                </p>
            </topic>
            <topic>
                <title>Context (ContextChanged)</title>
                <p>
                    The default value for this property is <b>null</b>.
                </p>
                <p>
                    This property offers a way to communicate between a window and control templates of child controls.
                    A typically scenario for this property is to assign an object.
                    The control template will get the same object and subscribe to its events.
                    A window can than talk to this object and except the control template to change something.
                </p>
                <p>
                    <b>Context</b> of the control template automatically updates when this property is changed.
                </p>
                <p>
                    Please check out
                    <a href="https://github.com/vczh-libraries/Release/tree/master/Tutorial/GacUI_Controls/TriplePhaseImageButton">
                        this tutorial project
                    </a>
                    as an example.
                    In this project,
                    it creates a new control <b>TriplePhaseButton</b> which has different images for different states.
                    This new control passes itself to the <b>Context</b> of a button inside this control,
                    and than the control template of this button communicates directly to this new control,
                    to make the button behaves like a triple-phases button (unlike double-phases buttons like check boxes).
                </p>
            </topic>
            <topic>
                <title>Focused (FocusedChanged)</title>
                <p>
                    The default value for this property is <b>false</b>.
                </p>
                <p>
                    Calling <b>SetFocus</b> to try to move focus to this control.
                    A focused control accepts keyboard and character input to the window.
                </p>
            </topic>
            <topic>
                <title>Tag</title>
                <p>
                    The default value for this property is <b>null</b>.
                </p>
                <p>
                    This property accepts any value.
                    It does nothing but associates a value to a control.
                </p>
            </topic>
        </topic>
        <topic>
            <title>Control Template</title>
            <p>
                The following properties and events control the control template for a control.
            </p>
            <topic>
                <title>ControlThemeName (ControlThemeNameChanged)</title>
                <p>
                    A <b>ThemeTemplates</b> contains control template implementations for controls.
                    Each control template factory fields are optional.
                    Multiple <b>ThemeTemplates</b> could be registered and unregistered using <b>RegisterTheme</b> and <b>UnregisteredTheme</b>.
                    The later registered <b>ThemeTemplates</b> has a higher pririty.
                </p>
                <p>
                    When calling <b>GetCurrentTheme-&gt;CreateStyle(themeName)</b>,
                    it goes through all registered theme and find if any <b>ThemeTemplates</b> has an implementation for the specified <b>themeName</b>.
                </p>
                <p>
                    <b>ControlThemeName</b> property specifies which control template should be used for this template.
                </p>
                <p>
                    Different control classes have different default values for this property.
                    In most of the cases this property is not expected to be changed during the runtime.
                </p>
                <p>
                    When <b>ControlThemeName</b> is changed and <b>ControlTemplate</b> is empty,
                    the control template for this control will be changed immediately.
                    <b>SetControlThemeNameAndTemplate</b> is for changing both <b>ControlThemeName</b> and <b>ControlTemplate</b> at the same time to improve the performance.
                </p>
            </topic>
            <topic>
                <title>ControlTemplate (ControlTemplateChanged)</title>
                <p>
                    This property is used when you doesn't want the registered control template for this control.
                </p>
                <p>
                    The default value for this property is empty.
                    The value for this property must be a <b>vl::Func</b> for the function type <b>templates::GuiControlTemplate*(const reflection::description::Value&amp;)</b>.
                </p>
                <p>
                    Please check out
                    <a href="/gacui/xmlres/instance/properties.html#Control-Item-Template-func-data-Object-TEMPLATE-CLASS-">
                        this page
                    </a>
                    for details about using this property in GacUI XML Resource.
                </p>
                <p>
                    When <b>ControlTemplate</b> is assigned with an empty value,
                    <b>ControlThemeName</b> kicks in and update the control template for this control.
                    When <b>ControlTemplate</b> is assigned with a non-empty value,
                    this property is evaluated to create a control template for this control.
                    <b>SetControlThemeNameAndTemplate</b> is for changing both <b>ControlThemeName</b> and <b>ControlTemplate</b> at the same time to improve the performance.
                </p>
            </topic>
            <topic>
                <title>ControlTemplateObject</title>
                <p>
                    This property returns the currently used control template instance.
                </p>
                <p>
                    A control template is also a composition,
                    and it has <b>BoundsComposition</b> and <b>ContainerComposition</b> too.
                    But they are not same values as the same property of the control.
                </p>
                <p>
                    <b>FocusComposition</b> is the same to control and control templates.
                </p>
            </topic>
        </topic>
        <topic>
            <title>Context</title>
            <p>
                The following properties and events provide access of the control's context.
            </p>
            <topic>
                <title>Parent (ControlSignalTrigerred)</title>
                <p>
                    A control appears inside its <b>Parent</b>,
                    otherwise this property returns <b>null</b> (usually for windows and menus).
                </p>
                <p>
                    To add a control directly inside another control,
                    just simply call <b>AddChild</b>, which adds the child control's <b>BoundsComposition</b> to the parent control's <b>ContainerComposition</b>.
                    It is also OK when the child control's <b>BoundsComposition</b> is not the direct child composition of the parent control's <b>ContainerComposition</b>.
                </p>
                <p>
                    <b>GetChildrenCount</b>, <b>GetChild</b> and <b>HasChild</b>
                    provide access for child controls.
                </p>
            </topic>
            <topic>
                <title>RelatedControlHost (ControlSignalTrigerred)</title>
                <p>
                    <b>RelatedControlHost</b> is the root parent control for a control,
                    which is usually a window or a menu.
                    otherwise this property returns <b>null</b> (usually for windows and menus).
                </p>
            </topic>
        </topic>
        <topic>
            <title>Behaviors</title>
            <p>
                The following properties and events control the behavior of a control.
            </p>
            <topic>
                <title>AcceptTabInput</title>
                <p>
                    The default value for this property <b>true</b>.
                </p>
                <p>
                    When this property is set to <b>true</b>,
                    pressing <b>TAB</b> key when this control is focused type a <b>TAB</b> character into this control.
                </p>
            </topic>
            <topic>
                <title>TabPriority</title>
                <p>
                    The default value for this property is <b>-1</b>.
                </p>
                <p>
                    Pressing <b>TAB</b> in a window cause the focus to move between all controls that have a non-negative value <b>TabProperty</b> from low to high.
                </p>
            </topic>
            <topic>
                <title>Alt (AltChanged)</title>
                <p>
                    The default value for this property is <b>&quot;&quot;</b>.
                </p>
                <p>
                    Pressing <b>ALT</b> causes a window prints all acceptable keys to move focus to all controls that have a non-empty <b>Alt</b>.
                </p>
                <p>
                    <b>Alt</b> could contain multiple upper-cased letters and digits,
                    which is a sequence that moves the focus to this control after pressing <b>ALT</b>.
                </p>
                <p>
                    For controls that are not focusable but manage focus of direct child controls (like Tab control),
                    or for controls that manage focus of child controls in another window (like menus),
                    <b>SetActivatingAltHost</b> is an important function to activate this feature for this control.
                    This function is only for control authors to use.
                    Pressing <b>ESC</b> or <b>BACKSPACE</b> goes back to the upper level window or control during a <b>ALT</b> sequence.
                </p>
            </topic>
            <topic>
                <title>TooltipControl</title>
                <p>
                    The default value for this property is <b>null</b>.
                </p>
                <p>
                    A legal value for this property must be a control that is not contained in any composition.
                    When the mouse stops on a control for a while,
                    its <b>TooltipControl</b> will appear at the mouse cursor.
                </p>
                <p>
                    When a control is deleted,
                    it also deletes its <b>TooltipControl</b>.
                </p>
                <p>
                    <b>DisplayTooltip</b> and <b>CloseTooltip</b>
                    could be call to manually control a tooltip proactively.
                </p>
            </topic>
            <topic>
                <title>TooltipWidth</title>
                <p>
                    The default value for this property is <b>0</b>.
                </p>
                <p>
                    This property controls the width of <b>TooltipControl</b>.
                </p>
            </topic>
        </topic>
        <topic>
            <title>Service Objects</title>
            <p>
                <b>AddService</b> associates a nullable service object to this control with an identifier that could be any string.
            </p>
            <p>
                <b>QueryService</b> or <b>QueryTypedService&lt;T&gt;</b> searches for a service object using an identifier all the way up to the top-level control.
                If multiple service objects are found,
                the one in the nearest parent control wins.
            </p>
            <p>
                Some service identifiers are hard-coded in controls,
                even if you try to associate a service objects using thses identifiers,
                it takes no effect on some controls:
                <ul>
                    <li>vl::presentation::compositions::IGuiAltAction</li>
                    <li>vl::presentation::compositions::IGuiAltActionContainer</li>
                    <li>vl::presentation::compositions::IGuiAltActionHost</li>
                    <li>vl::presentation::controls::IGuiMenuService</li>
                    <li>vl::presentation::controls::IGuiMenuDropdownProvider</li>
                    <li>vl::presentation::controls::IToolstripUpdateLayoutInvoker</li>
                    <li>vl::presentation::compositions::IGuiTabAction</li>
                </ul>
                Predefined services are full name of GacUI classes,
                it is easy to avoid conflict with your own service objects.
            </p>
        </topic>
    </topic>
</article>