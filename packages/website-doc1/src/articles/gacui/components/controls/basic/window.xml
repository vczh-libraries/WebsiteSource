<article index="true">
    <topic>
        <title>ControlHost and &lt;Window&gt;</title>
        <p>
            <ul>
                <li>
                    <b>&lt;Window/&gt;</b>
                    <ul>
                        <li><b>C++/Workflow</b>: (vl::)presentation::controls::GuiWindow*</li>
                        <li><b>Template Tag</b>: &lt;WindowTemplate/&gt;</li>
                        <li><b>Template Name</b>: Window</li>
                    </ul>
                </li>
            </ul>
        </p>
        <p>
            <b>&lt;Window/&gt;</b> is where we start our journey.
            <program>
                <code><![CDATA[
                    <Instance ref.CodeBehind="false" ref.Class="demo::MainWindow>
                      <Window ref.Name="self" Text="This is the main window" ClientSize="x:640 y:480">
                        <att.BoundsComposition-set PreferredMinSize="x:480 y:320">
                        <!-- Here to put contents inside a window -->
                      </Window>
                    </Instance>
                ]]></code>
            </program>
            <ul>
                <li>
                    <b>&lt;Window/&gt;</b> is a <b>ControlHost</b>,
                    which has to be a top-level window,
                    is usually a base class of an
                    <a href="/gacui/xmlres/tag_instance.html">
                        &lt;Instance&gt;
                    </a>.
                    Here we create a class <b>demo::MainWindow</b> inheriting from <b>&lt;Window/&gt;</b>.
                </li>
                <li>
                    <b>ref.CodeBehind</b> set to <b>false</b>
                    so that GacUI doesn't generate a separated pair of C++ source files for this class.
                </li>
                <li>
                    <b>Text</b> is the title of this window.
                </li>
                <li>
                    <b>ClientSize</b> is the initial size when the window is loaded.
                    This size doesn't include the border and the title.
                </li>
                <li>
                    <b>BoundsComposition.PreferredMinSize</b> is the minimum client size of this window.
                    When the window size is being changed by dragging the border,
                    it cannot go smaller than this size.
                </li>
            </ul>
        </p>
        <topic>
            <title>Adding something to a window</title>
            <p>
                <b>&lt;Window/&gt;</b> is just a control.
                Compositions and controls in the window will be added to its <b>ContainerComposition</b>.
                You don't have to explicitly use <b>att.ContainerComposition</b>.
            </p>
            <p>
                As a <b>GuiInstanceRootObject</b>,
                components can also be added to a window.
            </p>
            <p>
                Please check out
                <a href="https://github.com/vczh-libraries/Release/tree/master/Tutorial/GacUI_Xml/Instance_Window">
                    this tutorial project
                </a>
                for details.
            </p>
        </topic>
        <topic>
            <title>GuiControlHost Properties</title>
            <topic>
                <title>Focused (WindowGotFocus, WindowLostFocus)</title>
                <p>
                    A focused window receives keyboard inputs.
                    It will deliver all inputs to the focused control,
                    except for <b>ALT</b> sequence.
                </p>
            </topic>
            <topic>
                <title>Activated (WindowActivated, WindowDeactivated)</title>
                <p>
                    A focused window must be activated.
                </p>
                <p>
                    Calling <b>SetParent</b> of a control host's <b>NativeWindow</b>
                    makes a becomes another window's sub window.
                </p>
            </topic>
            <topic>
                <title>ShowInTaskBar</title>
                <p>
                    The default value is different in different sub classes.
                </p>
                <p>
                    When this property is set to <b>true</b>,
                    a icon (and probably with text) appears in the task bar.
                </p>
            </topic>
            <topic>
                <title>EnableActivate</title>
                <p>
                    The default value for this property is <b>true</b>.
                </p>
                <p>
                    When this property is set to <b>false</b>,
                    this window is not allowed to be activated by user interaction.
                    But this property will be automatically set to <b>false</b>
                    when the window is required to be activated by code.
                    For example, calling <b>Show</b> instead of <b>ShowDeactivated</b>,
                    or calling <b>SetActivated</b>.
                </p>
            </topic>
            <topic>
                <title>TopMost</title>
                <p>
                    The default value for this property is <b>false</b>.
                </p>
                <p>
                    When this property is set to <b>true</b>,
                    it stays in front of all windows whose <b>TopMost</b> is <b>false</b>.
                </p>
            </topic>
            <topic>
                <title>ClientSize</title>
                <p>
                    This property is the client size of a window.
                </p>
                <p>
                    The value doesn't change according to DPI or text scaling settings.
                    If text scaling is set to 200%,
                    a 320x240 client size is taking 640x480 pixels in the screen.
                </p>
            </topic>
            <topic>
                <title>Location</title>
                <p>
                    This property is the location of a window.
                </p>
                <p>
                    This value changes acfording to DPI or text scaling settings.
                    The coordinate is in screen space.
                    In a multiple monitors computer,
                    a visible window could have negative numbers in its location.
                </p>
                <p>
                    <b>SetBounds</b> could be called to set <b>Location</b> and <b>ClientSize</b> at the same time.
                </p>
            </topic>
            <topic>
                <title>TimerManager</title>
                <p>
                    This property returns a manager object that runs tasks repeatedly
                    until the task itself tells the manager object to stop.
                </p>
                <p>
                    <a href="/gacui/xmlres/tag_animation.html">
                        Animations
                    </a>
                    are built on top of it.
                </p>
            </topic>
            <topic>
                <title>Opening</title>
                <p>
                    When this property is <b>true</b>,
                    the window is visible.
                </p>
            </topic>
        </topic>
        <topic>
            <title>GuiControlHost Events</title>
            <topic>
                <title>WindowOpened</title>
                <p>
                    This event is raised right after a window is visible.
                </p>
            </topic>
            <topic>
                <title>WindowClosing</title>
                <p>
                    This event is raised before a window is closed.
                </p>
                <p>
                    The second argument for this event is a <b>GuiRequestEventArgs</b>.
                    By setting the <b>cancel</b> field to <b>true</b>,
                    it stops then window from being closed.
                </p>
            </topic>
            <topic>
                <title>WindowClosed</title>
                <p>
                    This event is raised right after a window is closed.
                </p>
            </topic>
            <topic>
                <title>WindowDestroying</title>
                <p>
                    This event is raised before a window is being deleted.
                    At this moment,
                    everything in the window is still alive.
                </p>
            </topic>
        </topic>
        <topic>
            <title>Displaying a GuiControlHost</title>
            <p>
                You could <b>Show</b> or <b>ShowDeactivated</b> a window without changing its size.
            </p>
            <p>
                You could also <b>ShowRestored</b>, <b>ShowMaximized</b> or <b>ShowMinimized</b> a window.
            </p>
            <p>
                To make a window invisible,
                you could call <b>Hide</b> or <b>Close</b>.
                Calling <b>Close</b> on the main window cause the application to begin an existing process.
                These two functions behaves the same for other windows.
            </p>
        </topic>
        <topic>
            <title>Controlling &lt;Window&gt; Border</title>
            <p>
                The following properties control what components should appear in the window's border:
                <ul>
                    <li>MaximizedBox</li>
                    <li>MinimizedBox</li>
                    <li>Border</li>
                    <li>SizeBox</li>
                    <li>IconVisible</li>
                    <li>TitleBar</li>
                </ul>
                A window's control template could accept or reject such changing by setting the following properties in <b>&lt;WindowTemplate/&gt;</b>:
                <ul>
                    <li>MaximizedBoxOption</li>
                    <li>MinimizedBoxOption</li>
                    <li>BorderOption</li>
                    <li>SizeBoxOption</li>
                    <li>IconVisibleOption</li>
                    <li>TitleBarOption</li>
                </ul>
                They could be <b>AlwaysTrue</b>, <b>AlwaysFalse</b> or <b>Customizable</b>.
            </p>
        </topic>
        <topic>
            <title>Displaying a &lt;Window&gt;</title>
            <p>
                The following functions displays a <b>&lt;Window/&lt;</b> as a sub window:
                <ul>
                    <li>
                        <b>ShowModal</b>:
                        This function makes a window visible as a model window.
                        A model window will disable its owner when it is visible.
                        The second argument will be called as a callback after this window is closed,
                        and then its owner window becomes enabled.
                    </li>
                    <li>
                        <b>ShowModalAndDelete</b>:
                        Just like <b>ShowModal</b>,
                        but after it is closed,
                        the window will be deleted.
                        Please check out
                        <a href="https://github.com/vczh-libraries/Release/tree/master/Tutorial/GacUI_Xml/Instance_MultipleWindows">
                            this tutorial project
                        </a>
                        for details.
                        It calls this function in C++ by specifying a function name in the button's <b>Clicked</b> event.
                        With <b>ref.CodeBehind="true"</b>,
                        a place holder is generated in
                        <a href="https://github.com/vczh-libraries/Release/blob/master/Tutorial/GacUI_Xml/Instance_MultipleWindows/UI/Source/MainWindow.cpp">
                            this separated file
                        </a>.
                    </li>
                    <li>
                        <b>ShowModalAsync</b>:
                        Just like <b>ShowModal</b>,
                        but it returns a <b>system::Async^</b> (or <b>Ptr&lt;reflection::description::IAsync&gt;</b> in C++).
                        This function can be used in <a href="/workflow/lang/coroutine_async.html">$Await</a>,
                        it simplies <b>Workflow</b> scripts in GacUI XML Resource a lot.
                        Please check out
                        <a href="https://github.com/vczh-libraries/Release/blob/master/Tutorial/GacUI_Controls/AddressBook/UI/Resource.xml">
                            this tutorial project
                        </a>
                        and
                        <a href="https://github.com/vczh-libraries/Release/blob/master/Tutorial/GacUI_ControlTemplate/BlackSkin/UI/FullControlTest/DocumentEditorBase.xml">
                            this tutorial project
                        </a>
                        for details.
                        They use <b>$Await window.ShowModalAsync(mainWindow);</b> followed by <b>delete window;</b>
                        as an alternative way to <b>ShowModalAndDelete</b> without involving lambda expressions as callbacks.
                    </li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>&lt;Window&gt;::ClipboardUpdated Event</title>
            <p>
                This event is raised when the content of the clipboard is changed.
            </p>
            <p>
                It happens before <b>clipboardNotify</b> in any composition inside this window.
            </p>
        </topic>
    </topic>
</article>