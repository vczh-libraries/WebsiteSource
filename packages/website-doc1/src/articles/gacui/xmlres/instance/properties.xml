<article index="true">
    <topic>
        <title>Properties</title>
        <p>
            The page is under construction.
        </p>
        <p>
            TODO:
            syntax (attribute, tag, binding)
            4 kinds of property (constructor, virtual, reflected specifying codegen, reflected)
            Bindings: -set, -ref, -bind, -format, -str, -eval, -uri
            &lt;_&gt; constructor, type inferred from property type.
        </p>
        <topic>
            <title>Syntax</title>
            <p>
                There are two ways to assign values to a property:
                <program><code><![CDATA[
                    <Object PROP1="VALUE">
                        <att.PROP2>VALUE</att.PROP2>
                    </Object>
                ]]></code></program>
                Or using data binding:
                <program><code><![CDATA[
                    <Object PROP1-BINDING="VALUE">
                        <att.PROP2-BINDING>VALUE</att.PROP2-BINDING>
                    </Object>
                ]]></code></program>
            </p>
            <p>
                Sometimes you want to assign values to a property in an object which is returned from another property:
                <program><code><![CDATA[
                    <Object>
                        <att.PROP1-set PROP2="VALUE">
                            <!-- all the above four ways are valid -->
                        </att.PROP1-set>
                    </Object>
                ]]></code></program>
                What it do is "OBJECT.PROP1.PROP2 = VALUE".
                This is very useful when configuring <b>BoundsComposition</b> and <b>ContainerComposition</b> of a control.
            </p>
        </topic>
        <topic>
            <title>Kinds of Properties</title>
            <p>
                An object have four kinds of properties
                all of them are in the same syntax:
                <ul>
                    <li>
                        <p>
                            <b>Constructor Parameter</b>:
                        </p>
                        <p>
                            The value of the parameter must be evaluated before calling the constructor of the object.
                            In <b>&lt;ComboBox/&gt;</b>,
                            <b>ListControl</b> is such kind of property.
                        </p>
                        <p>
                            A constructor parameter is not a real property,
                            it cannot be changed after the object is created.
                            Only assignment, <b>-uri</b> binding and <b>-eval</b> binding is valid on such properties.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Virtual Property</b>:
                        </p>
                        <p>
                            A virtual property is created to make XML more readable.
                            In <b>&lt;Table/&gt;</b>,
                            <b>Rows</b> and <b>Columns</b> are such kinds of properties.
                        </p>
                        <p>
                            A virtual parameter is not a real property,
                            it cannot be changed after the object is created.
                            Only assignment, <b>-ref</b> binding, <b>-uri</b> binding and <b>-eval</b> binding is valid on such properties.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Standard Property</b>:
                        </p>
                        <p>
                            A standard property is a real property of the object.
                            Typically,
                            assignment to the property <b>X</b> is converted to a calling of <b>SetX</b>,
                            but the actual generated code can be customized by using <a href="/vlppreflection/ref/VL__REFLECTION__DESCRIPTION.html">reflection</a>.
                        </p>
                    </li>
                </ul>
            </p>
        </topic>
        <topic>
            <title>Binding</title>
            <p>
                Besides assignment or <b>-set</b>,
                there are several kinds of data binding:
            </p>
            <topic>
                <title>-uri</title>
                <p>
                    This binding retrive an object from a resource and assign to the property.
                    This is a one-time assignment of the property.
                </p>
                <p>
                    Please checkout the following topics for details:
                    <ul>
                        <li><a href="/gacui/xmlres/tag_text.html">&lt;Text&gt;</a></li>
                        <li><a href="/gacui/xmlres/tag_image.html">&lt;Image&gt;</a></li>
                        <li><a href="/gacui/xmlres/tag_doc.html">&lt;Doc&gt;</a></li>
                        <li><a href="/gacui/xmlres/tag_xml.html">&lt;Xml&gt;</a></li>
                    </ul>
                </p>
            </topic>
            <topic>
                <title>-ref</title>
                <p>
                    This binding assign an object to the property.
                    This is a one-time assignment of the property.
                </p>
                <p>
                    The value of the property is the name of the object.
                    The name of an object is defined by its <b>ref.Name</b> property.
                </p>
                <p>
                    <b>-ref="self"</b> on the root instance is a very common pattern,
                    so that you can access the root instance with all custom members in <b>&lt;ref.Members/&gt;</b>.
                </p>
            </topic>
            <topic>
                <title>-eval</title>
                <p>
                    This binding assign a value to the property.
                    This is a one-time assignment of the property.
                </p>
                <p>
                    The value of the property is a <a href="/workflow/lang/expr.html">Workflow expression</a>.
                </p>
            </topic>
            <topic>
                <title>-bind</title>
                <p>
                    This binding bind the property to a <a href="/workflow/lang/expr.html">Workflow expression</a>.
                    When the expression is changed,
                    the property is assigned again.
                </p>
                <p>
                    Writing <b>-bind="EXPR"</b> means observing the <b><a href="/workflow/lang/bind.html">bind(EXPR)</a></b> expression.
                    You can also use <b>-bind="a.observe as b(EXPR on E1, E2, ...)"</b>
                    since <b>bind(a.observe as b(EXPR on E1, E2, ...))</b> is a valid Workflow expression.
                </p>
            </topic>
            <topic>
                <title>-format</title>
                <p>
                    This binding bind the property to <a href="/workflow/lang/expr.html#-formatted-string-">formatted string expression</a>.
                    When the expression is changed,
                    the property is assigned again.
                </p>
                <p>
                    For example,
                    to bind a text box's content to a label,
                    you can use:
                    <program><code><![CDATA[
                        <DocumentTextBox ref.Name="textBox"/>
                        <Label Text-format="Hello, $(textBox.Text)!"/>
                    ]]></code></program>
                    It is equivalent to:
                    <program><code><![CDATA[
                        <DocumentTextBox ref.Name="textBox"/>
                        <Label Text-bind="$'Hello, $(textBox.Text)!'"/>
                    ]]></code></program>
                    Note that, both <b>'</b> and <b>"</b> are valid for strings,
                    so it is very convenient to use <b>'</b> in XML attributes to avoid escaping.
                </p>
            </topic>
            <topic>
                <title>-str</title>
                <p>
                    This binding bind the property to string resource.
                    When the expression is changed,
                    the property is assigned again.
                </p>
                <p>
                    Please checkout <a href="/gacui/xmlres/tag_localizedstrings.html">&lt;LocalizedStrings&gt;</a> for details.
                </p>
            </topic>
        </topic>
        <topic>
            <title>Deserialization</title>
            <p>
                For any non-binding property assignment,
                GacUI interpret the property value differently for different types of propertyes.
            </p>
            <p>
                Here are a list of types and how they interpret property values:
            </p>
            <topic>
                <title>Primitive Types</title>
            </topic>
            <topic>
                <title>Structs</title>
            </topic>
            <topic>
                <title>Enums</title>
            </topic>
            <topic>
                <title>Classes or Interfaces</title>
            </topic>
            <topic>
                <title>Control/Item Template: func(data: Object): TEMPLATE_CLASS*</title>
            </topic>
            <topic>
                <title>Property Name: func(data: Object): PROPERTY_TYPE</title>
            </topic>
            <topic>
                <title>Writable Property Name: func(data: Object, value: PROPERTY_TYPE, isWrite: bool): PROPERTY_TYPE</title>
            </topic>
            <topic>
                <title>&lt;BindableDataGrid&gt; column properties</title>
                <topic>
                    <title>presentation::controls::list::IDataVisualizerFactory^</title>
                </topic>
                <topic>
                    <title>presentation::controls::list::IDataEditorFactory^</title>
                </topic>
                <topic>
                    <title>presentation::controls::list::IDataFilter^</title>
                </topic>
                <topic>
                    <title>presentation::controls::list::IDataSorter^</title>
                </topic>
            </topic>
        </topic>
    </topic>
</article>