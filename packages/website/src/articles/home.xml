<article index="true">
    <topic>
        <title>Welcome to Gaclib!</title>
        <p>
            Gaclib is a GPU accelerated C++ User Interface library.
            You can find it at <a href="https://github.com/vczh-libraries/Release">github</a>.
            This library provide many useful features.
            If you don't need all features,
            you can just use a subset of released C++ files to reduce the size of the executable.
        </p>
        <p>
            More and more developers are using this library to create their applications!
            You could check out <a href="http://www.majorav.com">majorav.com</a>,
            which is a very impressive example.
            Scroll to the end to see screenshots!
        </p>
        <topic>
            <title>Data processing</title>
            <topic>
                <title>Containers</title>
                <p>
                    <program language="C++"><code><![CDATA[
Group<vint, WString> xs;
xs.Add(1, L"C++");
xs.Add(1, L"C#");
xs.Add(1, L"TypeScript");
xs.Add(2, L"Java");
const List<WString>& ones = xs.Get[1];
                    ]]></code></program>
                </p>
            </topic>
            <topic>
                <title>Rich collection operations</title>
                <p>
                    <program language="C++"><code><![CDATA[
vint numbers[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
vint sumOfSquares = From(numbers)
    .Select([](vint i) { return i * i; })
    .Aggregate([](vint a, vint b) { return a + b; });
                    ]]></code></program>
                </p>
            </topic>
            <topic>
                <title>Files and streams</title>
                <p>
                    <program language="C++"><code><![CDATA[
Folder folder(L"C:/MyProjects/");
List<File> files;
folder.GetFiles(files);

WString fileNames = GenerateToStream([&](const TextWriter& writer)
{
    FOREACH(File, file, files)
    {
        writer.WriteLine(file.GetFilePath().GetName());
    }
});
File(L"C:/MyProjects/index.txt")
    .WriteAllText(fileNames, false, BomEncoder::Utf8);
                    ]]></code></program>
                </p>
            </topic>
            <topic>
                <title>Http client</title>
                <p>
                    <program language="C++"><code><![CDATA[
HttpRequest request;
request.SetHost(L"http://gaclib.net");

HttpResponse response;
HttpQuery(request, response);

Console::WriteLine(itow(response.statusCode));
Console::WriteLine(response.GetBodyUtf8());
                    ]]></code></program>
                </p>
            </topic>
            <topic>
                <title>Threading and synchronozation</title>
                <p>
                    <program language="C++"><code><![CDATA[
EventObject event;
event.CreateAutoUnsignal(false);

Thread::CreateAndStart([&]()
{
    DoSomething();
    event.Signal();
});

event.Wait();
                    ]]></code></program>
                </p>
            </topic>
        </topic>
        <topic>
            <title>String processing</title>
            <topic>
                <title>Regular expression</title>
                <p>
                    <program language="C++"><code><![CDATA[
Regex regex(L"^(<name>\w+):(<adj>\w+)");
Ptr<RegexMatch> match = regex.Match(L"GacUI:great");
Console::WriteLine(
    L"Hey, " +
    match->Groups()[L"name"][0].Value() +
    L" is " +
    match->Groups()[L"adj"][0].Value() +
    L"!"
);
                    ]]></code></program>
                </p>
            </topic>
            <topic>
                <title>GLR parser generation</title>
                <p>Grammar:</p>
                <p>
                    <program language="C++"><code><![CDATA[
include:<VlppParser.h>
namespace:calculator
reflection:calculator
classPrefix:Cal
classRoot:Expression
guard:CALCULATOR_PARSER
parser:Parse(Exp)
filePrefix:Calculator
file:Ast(_Ast)
file:Parser(_Parser)
ambiguity:disabled
serialization:enabled
grammar:

class Expression
{
}

class NumberExpression : Expression
{
    token value;
}

class BinaryExpression : Expression
{
    enum BinaryOperator
    {
        Add,
        Sub,
        Mul,
        Div,
    }

    Expression firstOperand;
    Expression secondOperand;
    BinaryOperator binaryOperator;
}

class FunctionExpression : Expression
{
    token functionName;
    Expression[] arguments;
}

token NAME = "[a-zA-Z_]/w*";
token NUMBER = "/d+(./d+)?";
token ADD = "/+";
token SUB = "-";
token MUL = "/*";
token DIV = "//";
token LEFT = "/(";
token RIGHT = "/)";
token COMMA = ",";
discardtoken SPACE = "/s+";

rule NumberExpression Number
        = NUMBER : value as NumberExpression
        ;
rule FunctionExpression Call
        = NAME : functionName "(" [ Exp : arguments { "," Exp : arguments } ] ")" as FunctionExpression
        ;
rule Expression Factor
        = !Number | !Call
        = "(" !Exp ")"
        ;
rule Expression Term
        = !Factor
        = Term : firstOperand "*" Factor : secondOperand as BinaryExpression with { binaryOperator = "Mul" }
        = Term : firstOperand "/" Factor : secondOperand as BinaryExpression with { binaryOperator = "Div" }
        ;
rule Expression Exp
        = !Term
        = Exp : firstOperand "+" Term : secondOperand as BinaryExpression with { binaryOperator = "Add" }
        = Exp : firstOperand "-" Term : secondOperand as BinaryExpression with { binaryOperator = "Sub" }
        ;
                    ]]></code></program>
                </p>
                <p>And what you get from generated C++ code:</p>
                <p>
                    <program language="C++"><code><![CDATA[
auto table = CalLoadTable();
Ptr<CalExpression> expr = CalParse(L"max(1, 2) * 3 - 4", table);
                    ]]></code></program>
                </p>
            </topic>
        </topic>
        <topic>
            <title>C++ reflection and scripting</title>
            <topic>
                <title>Easy registration</title>
                <p>
                    <program language="C++"><code><![CDATA[
namespace myapi
{
    class App : public Object, public Description<App>
    {
    public:
        void Print(const WString& text) { Console::WriteLine(text); }
        WString Get() { return Console::Read(); }
    };
}

using namespace myapi;

#define TYPE_LIST(F) F(myapi::App)

BEGIN_TYPE_INFO_NAMESPACE

	TYPE_LIST(DECL_TYPE_INFO)
	TYPE_LIST(IMPL_CPP_TYPE_INFO)

    BEGIN_CLASS_MEMBER(App)
        CLASS_MEMBER_CONSTRUCTOR(Ptr<App>(), NO_PARAMETER)
        CLASS_MEMBER_METHOD(Print, {L"text"})
        CLASS_MEMBER_METHOD(Get, NO_PARAMETER)
    END_CLASS_MEMBER(App)

	class MyTypeLoader : public Object, public ITypeLoader
	{
	public:
		void Load(ITypeManager* manager)override
		{
			TYPE_LIST(ADD_TYPE_INFO)
		}
		
		void Unload(ITypeManager* manager)override
		{
		}
	};

END_TYPE_INFO_NAMESPACE
                    ]]></code></program>
                </p>
            </topic>
            <topic>
                <title>Dynamic invoking</title>
                <p>
                    <program language="C++"><code><![CDATA[
LoadPredefinedTypes();

auto tm = GetGlobalTypeManager();
tm->AddTypeLoader(new MyTypeLoader);
tm->Load();

auto td = tm->GetTypeDescriptor(L"myapi::App");
auto ctor = td->GetConstructorGroup()->GetMethod(0);
auto print = td->GetMethodGroupByName(L"Print");

Value app = ctor->Invoke(Value(), Value_xs());

arguments.Add(BoxValue<WString>(L"Hello, world!"));
print->Invoke(app, (Value_xs(), WString(L"Hello, world!")));

ResetGlobalTypeManager();
                    ]]></code></program>
                </p>
            </topic>
            <topic>
                <title>Scripting and native code interoperability</title>
                <p>
                    <program language="Workflow"><code><![CDATA[
module myscript;
using myapp::*;

class MyScript
{
    new()
    {
    }

    func Main() : void
    {
        var app = new App^();
        var name = app.Get();
        app.Print($"Hello, $(name)!");
    }
}
                    ]]></code></program>
                </p>
            </topic>
            <topic>
                <title>C++ code generation</title>
                <p>Compile the script and generate C++ code, call it in C++!</p>
                <p>
                    <program language="C++"><code><![CDATA[
#include "MyScript.h"

int main()
{
    MakePtr<MyScript>()->Main();
}
                    ]]></code></program>
                </p>
            </topic>
        </topic>
        <topic>
            <title>... and GacUI!</title>
        </topic>
    </topic>
</article>