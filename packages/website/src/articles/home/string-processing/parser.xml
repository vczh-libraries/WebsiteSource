<?xml encoding="utf-8" ?>
<article>
    <topic>
        <title>GLR parser generation</title>
        <p>Grammar:</p>
        <p>
            <program language="C++"><code><![CDATA[
include:<VlppParser.h>
namespace:calculator
reflection:calculator
classPrefix:Cal
classRoot:Expression
guard:CALCULATOR_PARSER
parser:Parse(Exp)
filePrefix:Calculator
file:Ast(_Ast)
file:Parser(_Parser)
ambiguity:disabled
serialization:enabled
grammar:

class Expression
{
}

class NumberExpression : Expression
{
    token value;
}

class BinaryExpression : Expression
{
    enum BinaryOperator
    {
        Add,
        Sub,
        Mul,
        Div,
    }

    Expression firstOperand;
    Expression secondOperand;
    BinaryOperator binaryOperator;
}

class FunctionExpression : Expression
{
    token functionName;
    Expression[] arguments;
}

token NAME = "[a-zA-Z_]/w*";
token NUMBER = "/d+(./d+)?";
token ADD = "/+";
token SUB = "-";
token MUL = "/*";
token DIV = "//";
token LEFT = "/(";
token RIGHT = "/)";
token COMMA = ",";
discardtoken SPACE = "/s+";

rule NumberExpression Number
        = NUMBER : value as NumberExpression
        ;
rule FunctionExpression Call
        = NAME : functionName "(" [ Exp : arguments { "," Exp : arguments } ] ")" as FunctionExpression
        ;
rule Expression Factor
        = !Number | !Call
        = "(" !Exp ")"
        ;
rule Expression Term
        = !Factor
        = Term : firstOperand "*" Factor : secondOperand as BinaryExpression with { binaryOperator = "Mul" }
        = Term : firstOperand "/" Factor : secondOperand as BinaryExpression with { binaryOperator = "Div" }
        ;
rule Expression Exp
        = !Term
        = Exp : firstOperand "+" Term : secondOperand as BinaryExpression with { binaryOperator = "Add" }
        = Exp : firstOperand "-" Term : secondOperand as BinaryExpression with { binaryOperator = "Sub" }
        ;
            ]]></code></program>
        </p>
        <p>And what you get from generated C++ code:</p>
        <p>
            <program language="C++"><code><![CDATA[
auto table = CalLoadTable();
Ptr<CalExpression> expr = CalParse(L"max(1, 2) * 3 - 4", table);
            ]]></code></program>
        </p>
    </topic>
</article>